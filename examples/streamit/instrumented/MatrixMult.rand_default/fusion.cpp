#include <math.h>
#include <pthread.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include <netsocket.h>
#include <node_server.h>
#include <init_instance.h>
#include <master_server.h>
#include <save_state.h>
#include <save_manager.h>
#include <delete_chkpts.h>
#include <object_write_buffer.h>
#include <read_setup.h>
#include <ccp.h>
#include <timer.h>
#include "fusion.h"
#include "structs.h"

int __max_iteration;
int __timer_enabled = 0;
int __frequency_of_chkpts;
volatile int __vol;
proc_timer tt("total runtime");


float BUFFER_0_1[__BUF_SIZE_MASK_0_1 + 1];
int HEAD_0_1 = 0;
int TAIL_0_1 = 0;
float BUFFER_1_2[__BUF_SIZE_MASK_1_2 + 1];
int HEAD_1_2 = 0;
int TAIL_1_2 = 0;
float BUFFER_1_8[__BUF_SIZE_MASK_1_8 + 1];
int HEAD_1_8 = 0;
int TAIL_1_8 = 0;
float BUFFER_2_3[__BUF_SIZE_MASK_2_3 + 1];
int HEAD_2_3 = 0;
int TAIL_2_3 = 0;
float BUFFER_3_4[__BUF_SIZE_MASK_3_4 + 1];
int HEAD_3_4 = 0;
int TAIL_3_4 = 0;
float BUFFER_4_5[__BUF_SIZE_MASK_4_5 + 1];
int HEAD_4_5 = 0;
int TAIL_4_5 = 0;
float BUFFER_5_6[__BUF_SIZE_MASK_5_6 + 1];
int HEAD_5_6 = 0;
int TAIL_5_6 = 0;
float BUFFER_6_7[__BUF_SIZE_MASK_6_7 + 1];
int HEAD_6_7 = 0;
int TAIL_6_7 = 0;
float BUFFER_8_9[__BUF_SIZE_MASK_8_9 + 1];
int HEAD_8_9 = 0;
int TAIL_8_9 = 0;
float BUFFER_9_10[__BUF_SIZE_MASK_9_10 + 1];
int HEAD_9_10 = 0;
int TAIL_9_10 = 0;
float BUFFER_10_11[__BUF_SIZE_MASK_10_11 + 1];
int HEAD_10_11 = 0;
int TAIL_10_11 = 0;
float BUFFER_11_12[__BUF_SIZE_MASK_11_12 + 1];
int HEAD_11_12 = 0;
int TAIL_11_12 = 0;
float BUFFER_12_5[__BUF_SIZE_MASK_12_5 + 1];
int HEAD_12_5 = 0;
int TAIL_12_5 = 0;
extern void init_FloatSource__243_81__0();
extern void work_FloatSource__243_81__0(int);
#ifdef BUFFER_MERGE
extern void work_FloatSource__243_81__0__mod(int ____n, void *____in, float *____out);
extern void work_FloatSource__243_81__0__mod2(int ____n, void *____in, float *____out, int s1, int s2);
#endif
extern void __splitter_1_work(int);
extern void init_AutoGeneratedExpander__247_141__2();
extern void work_AutoGeneratedExpander__247_141__2(int);
#ifdef BUFFER_MERGE
extern void work_AutoGeneratedExpander__247_141__2__mod(int ____n, float *____in, float *____out);
extern void work_AutoGeneratedExpander__247_141__2__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_Identity__250_85__3();
extern void Identity__250_85__work__3(int);
#ifdef BUFFER_MERGE
extern void Identity__250_85__work__3__mod(int ____n, float *____in, float *____out);
extern void Identity__250_85__work__3__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_Pre_CollapsedDataParallel_2__256_233__4();
extern void work_Pre_CollapsedDataParallel_2__256_233__4(int);
#ifdef BUFFER_MERGE
extern void work_Pre_CollapsedDataParallel_2__256_233__4__mod(int ____n, float *____in, float *____out);
extern void work_Pre_CollapsedDataParallel_2__256_233__4__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void __joiner_5_work(int);
extern void init_MultiplyAccumulate__283_117__6();
extern void work_MultiplyAccumulate__283_117__6(int);
#ifdef BUFFER_MERGE
extern void work_MultiplyAccumulate__283_117__6__mod(int ____n, float *____in, float *____out);
extern void work_MultiplyAccumulate__283_117__6__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_FloatPrinter__287_127__7();
extern void work_FloatPrinter__287_127__7(int);
#ifdef BUFFER_MERGE
extern void work_FloatPrinter__287_127__7__mod(int ____n, float *____in, void *____out);
extern void work_FloatPrinter__287_127__7__mod2(int ____n, float *____in, void *____out, int s1, int s2);
#endif
extern void init_Identity__259_96__8();
extern void Identity__259_96__work__8(int);
#ifdef BUFFER_MERGE
extern void Identity__259_96__work__8__mod(int ____n, float *____in, float *____out);
extern void Identity__259_96__work__8__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_Pre_CollapsedDataParallel_2__265_234__9();
extern void work_Pre_CollapsedDataParallel_2__265_234__9(int);
#ifdef BUFFER_MERGE
extern void work_Pre_CollapsedDataParallel_2__265_234__9__mod(int ____n, float *____in, float *____out);
extern void work_Pre_CollapsedDataParallel_2__265_234__9__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_AutoGeneratedExpander__269_193__10();
extern void work_AutoGeneratedExpander__269_193__10(int);
#ifdef BUFFER_MERGE
extern void work_AutoGeneratedExpander__269_193__10__mod(int ____n, float *____in, float *____out);
extern void work_AutoGeneratedExpander__269_193__10__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_Identity__272_107__11();
extern void Identity__272_107__work__11(int);
#ifdef BUFFER_MERGE
extern void Identity__272_107__work__11__mod(int ____n, float *____in, float *____out);
extern void Identity__272_107__work__11__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
extern void init_Pre_CollapsedDataParallel_2__278_235__12();
extern void work_Pre_CollapsedDataParallel_2__278_235__12(int);
#ifdef BUFFER_MERGE
extern void work_Pre_CollapsedDataParallel_2__278_235__12__mod(int ____n, float *____in, float *____out);
extern void work_Pre_CollapsedDataParallel_2__278_235__12__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif

int main(int argc, char **argv) {
  read_setup::read_setup_file();
  __max_iteration = read_setup::max_iteration;
  for (int a = 1; a < argc; a++) {
    if (argc > a + 1 && strcmp(argv[a], "-i") == 0) {
      int tmp;
      sscanf(argv[a + 1], "%d", &tmp);
#ifdef VERBOSE
      fprintf(stderr,"Number of Iterations: %d\n", tmp);
#endif
      __max_iteration = tmp;
    }
    if (strcmp(argv[a], "-t") == 0) {
#ifdef VERBOSE
       fprintf(stderr,"Timer enabled.\n");
#endif
       __timer_enabled = 1;    }
  }
// number of phases: 10


  // ============= Initialization =============

init_FloatSource__243_81__0();
init_AutoGeneratedExpander__247_141__2();
init_Identity__259_96__8();
init_Identity__250_85__3();
init_Pre_CollapsedDataParallel_2__265_234__9();
init_Pre_CollapsedDataParallel_2__256_233__4();
init_AutoGeneratedExpander__269_193__10();
init_Identity__272_107__11();
init_Pre_CollapsedDataParallel_2__278_235__12();
init_MultiplyAccumulate__283_117__6();
init_FloatPrinter__287_127__7();

  // ============= Steady State =============

  if (__timer_enabled) {
    tt.start();
  }
  for (int n = 0; n < (__max_iteration  ); n++) {
HEAD_0_1 = 0;
TAIL_0_1 = 0;
    work_FloatSource__243_81__0(200 );
HEAD_1_2 = 0;
TAIL_1_2 = 0;
HEAD_1_8 = 0;
TAIL_1_8 = 0;
    __splitter_1_work(1 );
HEAD_2_3 = 0;
TAIL_2_3 = 0;
    work_AutoGeneratedExpander__247_141__2(100 );
HEAD_8_9 = 0;
TAIL_8_9 = 0;
    Identity__259_96__work__8(100 );
HEAD_3_4 = 0;
TAIL_3_4 = 0;
    Identity__250_85__work__3(1000 );
HEAD_9_10 = 0;
TAIL_9_10 = 0;
    work_Pre_CollapsedDataParallel_2__265_234__9(1 );
HEAD_4_5 = 0;
TAIL_4_5 = 0;
    work_Pre_CollapsedDataParallel_2__256_233__4(10 );
HEAD_10_11 = 0;
TAIL_10_11 = 0;
    work_AutoGeneratedExpander__269_193__10(100 );
HEAD_11_12 = 0;
TAIL_11_12 = 0;
    Identity__272_107__work__11(1000 );
HEAD_12_5 = 0;
TAIL_12_5 = 0;
    work_Pre_CollapsedDataParallel_2__278_235__12(1 );
HEAD_5_6 = 0;
TAIL_5_6 = 0;
    __joiner_5_work(1000 );
HEAD_6_7 = 0;
TAIL_6_7 = 0;
    work_MultiplyAccumulate__283_117__6(100 );
    work_FloatPrinter__287_127__7(100 );
  }
if (__timer_enabled) {
    tt.stop();
    tt.output(stderr);
  }


  return 0;
}
