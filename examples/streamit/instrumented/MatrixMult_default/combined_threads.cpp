#include <math.h>
#include <pthread.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include <netsocket.h>
#include <node_server.h>
#include <init_instance.h>
#include <master_server.h>
#include <save_state.h>
#include <save_manager.h>
#include <delete_chkpts.h>
#include <object_write_buffer.h>
#include <read_setup.h>
#include <ccp.h>
#include <timer.h>
#include "fusion.h"
#include "structs.h"

#ifdef MEASURE_BY_RTS
#include "../../../../rts/rts.h"
struct RTS_VARS* thr_vars __attribute__((aligned(CACHELINE_SIZE)));
#else //default ``MEASURE_BY_PAPI''
#include "../../../../papi_wrapper/papi_hw_counter.h"
struct PAPI_VARS* thr_vars __attribute__((aligned(CACHELINE_SIZE)));
FILE *summary_f;
#endif
int numcpus __attribute__((aligned(CACHELINE_SIZE)));
int numiters __attribute__((aligned(CACHELINE_SIZE)));

int __max_iteration;
int __timer_enabled = 0;
int __frequency_of_chkpts;
volatile int __vol;
volatile double sum;
proc_timer tt("total runtime");


float BUFFER_0_1[__BUF_SIZE_MASK_0_1 + 1];
int HEAD_0_1 = 0;
int TAIL_0_1 = 0;
float BUFFER_1_2[__BUF_SIZE_MASK_1_2 + 1];
int HEAD_1_2 = 0;
int TAIL_1_2 = 0;
float BUFFER_1_8[__BUF_SIZE_MASK_1_8 + 1];
int HEAD_1_8 = 0;
int TAIL_1_8 = 0;
float BUFFER_2_3[__BUF_SIZE_MASK_2_3 + 1];
int HEAD_2_3 = 0;
int TAIL_2_3 = 0;
float BUFFER_3_4[__BUF_SIZE_MASK_3_4 + 1];
int HEAD_3_4 = 0;
int TAIL_3_4 = 0;
float BUFFER_4_5[__BUF_SIZE_MASK_4_5 + 1];
int HEAD_4_5 = 0;
int TAIL_4_5 = 0;
float BUFFER_5_6[__BUF_SIZE_MASK_5_6 + 1];
int HEAD_5_6 = 0;
int TAIL_5_6 = 0;
float BUFFER_6_7[__BUF_SIZE_MASK_6_7 + 1];
int HEAD_6_7 = 0;
int TAIL_6_7 = 0;
float BUFFER_8_9[__BUF_SIZE_MASK_8_9 + 1];
int HEAD_8_9 = 0;
int TAIL_8_9 = 0;
float BUFFER_9_10[__BUF_SIZE_MASK_9_10 + 1];
int HEAD_9_10 = 0;
int TAIL_9_10 = 0;
float BUFFER_10_11[__BUF_SIZE_MASK_10_11 + 1];
int HEAD_10_11 = 0;
int TAIL_10_11 = 0;
float BUFFER_11_12[__BUF_SIZE_MASK_11_12 + 1];
int HEAD_11_12 = 0;
int TAIL_11_12 = 0;
float BUFFER_12_5[__BUF_SIZE_MASK_12_5 + 1];
int HEAD_12_5 = 0;
int TAIL_12_5 = 0;
void init_FloatSource__243_81__0();
void work_FloatSource__243_81__0(int);
#ifdef BUFFER_MERGE
void work_FloatSource__243_81__0__mod(int ____n, void *____in, float *____out);
void work_FloatSource__243_81__0__mod2(int ____n, void *____in, float *____out, int s1, int s2);
#endif
void __splitter_1_work(int);
void init_AutoGeneratedExpander__247_141__2();
void work_AutoGeneratedExpander__247_141__2(int);
#ifdef BUFFER_MERGE
void work_AutoGeneratedExpander__247_141__2__mod(int ____n, float *____in, float *____out);
void work_AutoGeneratedExpander__247_141__2__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_Identity__250_85__3();
void Identity__250_85__work__3(int);
#ifdef BUFFER_MERGE
void Identity__250_85__work__3__mod(int ____n, float *____in, float *____out);
void Identity__250_85__work__3__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_Pre_CollapsedDataParallel_2__256_233__4();
void work_Pre_CollapsedDataParallel_2__256_233__4(int);
#ifdef BUFFER_MERGE
void work_Pre_CollapsedDataParallel_2__256_233__4__mod(int ____n, float *____in, float *____out);
void work_Pre_CollapsedDataParallel_2__256_233__4__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void __joiner_5_work(int);
void init_MultiplyAccumulate__283_117__6();
void work_MultiplyAccumulate__283_117__6(int);
#ifdef BUFFER_MERGE
void work_MultiplyAccumulate__283_117__6__mod(int ____n, float *____in, float *____out);
void work_MultiplyAccumulate__283_117__6__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_FloatPrinter__287_127__7();
void work_FloatPrinter__287_127__7(int);
#ifdef BUFFER_MERGE
void work_FloatPrinter__287_127__7__mod(int ____n, float *____in, void *____out);
void work_FloatPrinter__287_127__7__mod2(int ____n, float *____in, void *____out, int s1, int s2);
#endif
void init_Identity__259_96__8();
void Identity__259_96__work__8(int);
#ifdef BUFFER_MERGE
void Identity__259_96__work__8__mod(int ____n, float *____in, float *____out);
void Identity__259_96__work__8__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_Pre_CollapsedDataParallel_2__265_234__9();
void work_Pre_CollapsedDataParallel_2__265_234__9(int);
#ifdef BUFFER_MERGE
void work_Pre_CollapsedDataParallel_2__265_234__9__mod(int ____n, float *____in, float *____out);
void work_Pre_CollapsedDataParallel_2__265_234__9__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_AutoGeneratedExpander__269_193__10();
void work_AutoGeneratedExpander__269_193__10(int);
#ifdef BUFFER_MERGE
void work_AutoGeneratedExpander__269_193__10__mod(int ____n, float *____in, float *____out);
void work_AutoGeneratedExpander__269_193__10__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_Identity__272_107__11();
void Identity__272_107__work__11(int);
#ifdef BUFFER_MERGE
void Identity__272_107__work__11__mod(int ____n, float *____in, float *____out);
void Identity__272_107__work__11__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif
void init_Pre_CollapsedDataParallel_2__278_235__12();
void work_Pre_CollapsedDataParallel_2__278_235__12(int);
#ifdef BUFFER_MERGE
void work_Pre_CollapsedDataParallel_2__278_235__12__mod(int ____n, float *____in, float *____out);
void work_Pre_CollapsedDataParallel_2__278_235__12__mod2(int ____n, float *____in, float *____out, int s1, int s2);
#endif

int main(int argc, char **argv) {
  read_setup::read_setup_file();
  __max_iteration = read_setup::max_iteration;
  for (int a = 1; a < argc; a++) {
    if (argc > a + 1 && strcmp(argv[a], "-i") == 0) {
      int tmp;
      sscanf(argv[a + 1], "%d", &tmp);
#ifdef VERBOSE
      fprintf(stderr,"Number of Iterations: %d\n", tmp);
#endif
      __max_iteration = tmp;
    }
    if (strcmp(argv[a], "-t") == 0) {
#ifdef VERBOSE
       fprintf(stderr,"Timer enabled.\n");
#endif
       __timer_enabled = 1;    }
  }
// number of phases: 10


#ifdef MEASURE_BY_RTS
RTS_init(1,1);
#else //default ``MEASURE_BY_PAPI''
PAPI_HW_COUNTER_init(1,1);
#endif
  // ============= Initialization =============

init_FloatSource__243_81__0();
init_AutoGeneratedExpander__247_141__2();
init_Identity__259_96__8();
init_Identity__250_85__3();
init_Pre_CollapsedDataParallel_2__265_234__9();
init_Pre_CollapsedDataParallel_2__256_233__4();
init_AutoGeneratedExpander__269_193__10();
init_Identity__272_107__11();
init_Pre_CollapsedDataParallel_2__278_235__12();
init_MultiplyAccumulate__283_117__6();
init_FloatPrinter__287_127__7();

#ifdef MEASURE_BY_RTS
RTS_thread_init(0,1);
#else //default ``MEASURE_BY_PAPI''
PAPI_HW_COUNTER_thread_init(0,1);
PAPI_HW_COUNTER_open(0);
#endif
  // ============= Steady State =============

  if (__timer_enabled) {
    tt.start();
  }
#ifdef MEASURE_BY_RTS
  RTS_start_timer(0,0);
#else //default ``MEASURE_BY_PAPI''
 PAPI_HW_COUNTER_on(0,0);
#endif
  for (int n = 0; n < (__max_iteration  ); n++) {
HEAD_0_1 = 0;
TAIL_0_1 = 0;
    work_FloatSource__243_81__0(200 );
HEAD_1_2 = 0;
TAIL_1_2 = 0;
HEAD_1_8 = 0;
TAIL_1_8 = 0;
    __splitter_1_work(1 );
HEAD_2_3 = 0;
TAIL_2_3 = 0;
    work_AutoGeneratedExpander__247_141__2(100 );
HEAD_8_9 = 0;
TAIL_8_9 = 0;
    Identity__259_96__work__8(100 );
HEAD_3_4 = 0;
TAIL_3_4 = 0;
    Identity__250_85__work__3(1000 );
HEAD_9_10 = 0;
TAIL_9_10 = 0;
    work_Pre_CollapsedDataParallel_2__265_234__9(1 );
HEAD_4_5 = 0;
TAIL_4_5 = 0;
    work_Pre_CollapsedDataParallel_2__256_233__4(10 );
HEAD_10_11 = 0;
TAIL_10_11 = 0;
    work_AutoGeneratedExpander__269_193__10(100 );
HEAD_11_12 = 0;
TAIL_11_12 = 0;
    Identity__272_107__work__11(1000 );
HEAD_12_5 = 0;
TAIL_12_5 = 0;
    work_Pre_CollapsedDataParallel_2__278_235__12(1 );
HEAD_5_6 = 0;
TAIL_5_6 = 0;
    __joiner_5_work(1000 );
HEAD_6_7 = 0;
TAIL_6_7 = 0;
    work_MultiplyAccumulate__283_117__6(100 );
    work_FloatPrinter__287_127__7(100 );
  }
  #ifdef MEASURE_BY_RTS
	RTS_stop_timer(0,0);
	RTS_record("PROGRAM",0,0,0);
	RTS_write_time(0);
  #else //default ``MEASURE_BY_PAPI''
	PAPI_HW_COUNTER_off(0,0);
	PAPI_HW_COUNTER_record("PROGRAM",0,0,0);
	PAPI_HW_COUNTER_write(0);
	PAPI_HW_COUNTER_close(0);
	PAPI_HW_COUNTER_write_summary();
  #endif
if (__timer_enabled) {
    tt.stop();
    tt.output(stderr);
  }

  printf("%f\n", sum);
  return 0;
}

// moved or inserted by concat_cluster_threads.pl
#include <message.h>
message *__msg_stack_12;
message *__msg_stack_1;
message *__msg_stack_11;
message *__msg_stack_3;
message *__msg_stack_10;
message *__msg_stack_5;
message *__msg_stack_7;
message *__msg_stack_2;
message *__msg_stack_6;
message *__msg_stack_9;
message *__msg_stack_4;
message *__msg_stack_0;
message *__msg_stack_8;

// end of moved or inserted by concat_cluster_threads.pl

// peek: 0 pop: 0 push 1
// init counts: 0 steady counts: 200

// ClusterFusion isEliminated: false


#include <mysocket.h>
#include <sdep.h>
#include <thread_info.h>
#include <consumer2.h>
#include <consumer2p.h>
#include <producer2.h>
#include "cluster.h"
#include "global.h"

int __number_of_iterations_0;
int __counter_0 = 0;
int __steady_0 = 0;
int __tmp_0 = 0;
int __tmp2_0 = 0;
int *__state_flag_0 = NULL;
thread_info *__thread_0 = NULL;



float num__240__0 = 0.0f;
void save_file_pointer__0(object_write_buffer *buf);
void load_file_pointer__0(object_write_buffer *buf);

 
void init_FloatSource__243_81__0();
inline void check_status__0();

void work_FloatSource__243_81__0(int);



inline void __push__0(float data) {
BUFFER_0_1[HEAD_0_1]=data;
HEAD_0_1++;
}



 
void init_FloatSource__243_81__0(){
  ((num__240__0) = ((float)0.0))/*float*/;
}
void save_file_pointer__0(object_write_buffer *buf) {}
void load_file_pointer__0(object_write_buffer *buf) {}
 
void work_FloatSource__243_81__0(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      // mark begin: SIRFilter FloatSource

      __push__0((num__240__0));
      ((num__240__0)++);

      if (((num__240__0) == ((float)10.0))) {((num__240__0) = ((float)0.0))/*float*/;}
      // mark end: SIRFilter FloatSource

    }
  }
}

// init counts: 0 steady counts: 1

// ClusterFusion isEliminated: false



int __number_of_iterations_1;
int __counter_1 = 0;
int __steady_1 = 0;
int __tmp_1 = 0;
int __tmp2_1 = 0;
int *__state_flag_1 = NULL;
thread_info *__thread_1 = NULL;




void __splitter_1_work(int ____n) {
  for (;____n > 0; ____n--) {
  for (int __k = 0; __k < 12; __k++) {
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
  }
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
BUFFER_1_2[HEAD_1_2]=BUFFER_0_1[TAIL_0_1];
HEAD_1_2++; ; TAIL_0_1++;
  for (int __k = 0; __k < 12; __k++) {
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
  }
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
BUFFER_1_8[HEAD_1_8]=BUFFER_0_1[TAIL_0_1];
HEAD_1_8++; ; TAIL_0_1++;
  }
}


// peek: 1 pop: 1 push 10
// init counts: 0 steady counts: 100

// ClusterFusion isEliminated: false



int __number_of_iterations_2;
int __counter_2 = 0;
int __steady_2 = 0;
int __tmp_2 = 0;
int __tmp2_2 = 0;
int *__state_flag_2 = NULL;
thread_info *__thread_2 = NULL;



void save_peek_buffer__2(object_write_buffer *buf);
void load_peek_buffer__2(object_write_buffer *buf);
void save_file_pointer__2(object_write_buffer *buf);
void load_file_pointer__2(object_write_buffer *buf);

 
void init_AutoGeneratedExpander__247_141__2();
inline void check_status__2();

void work_AutoGeneratedExpander__247_141__2(int);


inline float __pop__2() {
float res=BUFFER_1_2[TAIL_1_2];
TAIL_1_2++;
return res;
}

inline float __pop__2(int n) {
float res=BUFFER_1_2[TAIL_1_2];
TAIL_1_2+=n;

return res;
}

inline float __peek__2(int offs) {
return BUFFER_1_2[TAIL_1_2+offs];
}



inline void __push__2(float data) {
BUFFER_2_3[HEAD_2_3]=data;
HEAD_2_3++;
}



 
void init_AutoGeneratedExpander__247_141__2(){
}
void save_file_pointer__2(object_write_buffer *buf) {}
void load_file_pointer__2(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_AutoGeneratedExpander__247_141__2__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  int streamItVar11__246 = 0;/* int */

  // mark begin: SIRFilter AutoGeneratedExpander

  for ((streamItVar11__246 = 0)/*int*/; (streamItVar11__246 < 10); (streamItVar11__246++)) {{
      ((*____out++)=(*(____in+0)));
    }
  }
  (*____in++);
  // mark end: SIRFilter AutoGeneratedExpander

}}


void work_AutoGeneratedExpander__247_141__2__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  int streamItVar11__246 = 0;/* int */

  // mark begin: SIRFilter AutoGeneratedExpander

  for ((streamItVar11__246 = 0)/*int*/; (streamItVar11__246 < 10); (streamItVar11__246++)) {{
      ((*____out++)=(*(____in+0)));
    }
  }
  (*____in++);
  // mark end: SIRFilter AutoGeneratedExpander

}}


#endif // BUFFER_MERGE


 
void work_AutoGeneratedExpander__247_141__2(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      int streamItVar11__246 = 0;/* int */

      // mark begin: SIRFilter AutoGeneratedExpander

      for ((streamItVar11__246 = 0)/*int*/; (streamItVar11__246 < 10); (streamItVar11__246++)) {{
          __push__2(__peek__2(0));
        }
      }
      __pop__2();
      // mark end: SIRFilter AutoGeneratedExpander

    }
  }
}

// peek: 1 pop: 1 push 1
// init counts: 0 steady counts: 1000

// ClusterFusion isEliminated: false



int __number_of_iterations_3;
int __counter_3 = 0;
int __steady_3 = 0;
int __tmp_3 = 0;
int __tmp2_3 = 0;
int *__state_flag_3 = NULL;
thread_info *__thread_3 = NULL;



void save_peek_buffer__3(object_write_buffer *buf);
void load_peek_buffer__3(object_write_buffer *buf);
void save_file_pointer__3(object_write_buffer *buf);
void load_file_pointer__3(object_write_buffer *buf);

 
void init_Identity__250_85__3();
inline void check_status__3();

void Identity__250_85__work__3(int);


inline float __pop__3() {
float res=BUFFER_2_3[TAIL_2_3];
TAIL_2_3++;
return res;
}

inline float __pop__3(int n) {
float res=BUFFER_2_3[TAIL_2_3];
TAIL_2_3+=n;

return res;
}

inline float __peek__3(int offs) {
return BUFFER_2_3[TAIL_2_3+offs];
}



inline void __push__3(float data) {
BUFFER_3_4[HEAD_3_4]=data;
HEAD_3_4++;
}



void init_Identity__250_85__3() {
}

void save_file_pointer__3(object_write_buffer *buf) {}
void load_file_pointer__3(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_Identity__250_85__3__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  // mark begin: SIRIdentity Identity

  ((*____out++)=(*____in++));
  // mark end: SIRIdentity Identity

}}


void work_Identity__250_85__3__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  // mark begin: SIRIdentity Identity

  ((*____out++)=(*____in++));
  // mark end: SIRIdentity Identity

}}


#endif // BUFFER_MERGE


void Identity__250_85__work__3(int ____n) {
    for (; 0 < ____n; ____n--) {
        __push__3(__pop__3());
    }
}


// peek: 100 pop: 100 push 100
// init counts: 0 steady counts: 10

// ClusterFusion isEliminated: false



int __number_of_iterations_4;
int __counter_4 = 0;
int __steady_4 = 0;
int __tmp_4 = 0;
int __tmp2_4 = 0;
int *__state_flag_4 = NULL;
thread_info *__thread_4 = NULL;



void save_peek_buffer__4(object_write_buffer *buf);
void load_peek_buffer__4(object_write_buffer *buf);
void save_file_pointer__4(object_write_buffer *buf);
void load_file_pointer__4(object_write_buffer *buf);

 
void init_Pre_CollapsedDataParallel_2__256_233__4();
inline void check_status__4();

void work_Pre_CollapsedDataParallel_2__256_233__4(int);


inline float __pop__4() {
float res=BUFFER_3_4[TAIL_3_4];
TAIL_3_4++;
return res;
}

inline float __pop__4(int n) {
float res=BUFFER_3_4[TAIL_3_4];
TAIL_3_4+=n;

return res;
}

inline float __peek__4(int offs) {
return BUFFER_3_4[TAIL_3_4+offs];
}



inline void __push__4(float data) {
BUFFER_4_5[HEAD_4_5]=data;
HEAD_4_5++;
}



 
void init_Pre_CollapsedDataParallel_2__256_233__4(){
}
void save_file_pointer__4(object_write_buffer *buf) {}
void load_file_pointer__4(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_Pre_CollapsedDataParallel_2__256_233__4__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  int _k__253 = 0;/* int */
  int iTimesSumOfWeights_Plus_PartialSum_k__254 = 0;/* int */
  int _i__255 = 0;/* int */

  // mark begin: SIRFilter Pre_CollapsedDataParallel_2

  // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  for ((_k__253 = 0)/*int*/; (_k__253 < 10); (_k__253++)) {{
      (iTimesSumOfWeights_Plus_PartialSum_k__254 = _k__253)/*int*/;
      for ((_i__255 = 0)/*int*/; (_i__255 < 10); (_i__255++)) {{
          ((*____out++)=(*(____in+(iTimesSumOfWeights_Plus_PartialSum_k__254 + 0))));
          (iTimesSumOfWeights_Plus_PartialSum_k__254 = (iTimesSumOfWeights_Plus_PartialSum_k__254 + 10))/*int*/;
        }
      }
    }
  }
  assert(false);__pop__4(100);
  // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  // mark end: SIRFilter Pre_CollapsedDataParallel_2

}}


void work_Pre_CollapsedDataParallel_2__256_233__4__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  int _k__253 = 0;/* int */
  int iTimesSumOfWeights_Plus_PartialSum_k__254 = 0;/* int */
  int _i__255 = 0;/* int */

  // mark begin: SIRFilter Pre_CollapsedDataParallel_2

  // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  for ((_k__253 = 0)/*int*/; (_k__253 < 10); (_k__253++)) {{
      (iTimesSumOfWeights_Plus_PartialSum_k__254 = _k__253)/*int*/;
      for ((_i__255 = 0)/*int*/; (_i__255 < 10); (_i__255++)) {{
          ((*____out++)=(*(____in+(iTimesSumOfWeights_Plus_PartialSum_k__254 + 0))));
          (iTimesSumOfWeights_Plus_PartialSum_k__254 = (iTimesSumOfWeights_Plus_PartialSum_k__254 + 10))/*int*/;
        }
      }
    }
  }
  assert(false);__pop__4(100);
  // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  // mark end: SIRFilter Pre_CollapsedDataParallel_2

}}


#endif // BUFFER_MERGE


 
void work_Pre_CollapsedDataParallel_2__256_233__4(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      int _k__253 = 0;/* int */
      int iTimesSumOfWeights_Plus_PartialSum_k__254 = 0;/* int */
      int _i__255 = 0;/* int */

      // mark begin: SIRFilter Pre_CollapsedDataParallel_2

      // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

      for ((_k__253 = 0)/*int*/; (_k__253 < 10); (_k__253++)) {{
          (iTimesSumOfWeights_Plus_PartialSum_k__254 = _k__253)/*int*/;
          for ((_i__255 = 0)/*int*/; (_i__255 < 10); (_i__255++)) {{
              __push__4(__peek__4((iTimesSumOfWeights_Plus_PartialSum_k__254 + 0)));
              (iTimesSumOfWeights_Plus_PartialSum_k__254 = (iTimesSumOfWeights_Plus_PartialSum_k__254 + 10))/*int*/;
            }
          }
        }
      }
      __pop__4(100);
      // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

      // mark end: SIRFilter Pre_CollapsedDataParallel_2

    }
  }
}

// init counts: 0 steady counts: 1000

// ClusterFusion isEliminated: false



int __number_of_iterations_5;
int __counter_5 = 0;
int __steady_5 = 0;
int __tmp_5 = 0;
int __tmp2_5 = 0;
int *__state_flag_5 = NULL;
thread_info *__thread_5 = NULL;




void __joiner_5_work(int ____n) {
  for (;____n > 0; ____n--) {
BUFFER_5_6[HEAD_5_6]=BUFFER_4_5[TAIL_4_5];
HEAD_5_6++; ; TAIL_4_5++;
BUFFER_5_6[HEAD_5_6]=BUFFER_12_5[TAIL_12_5];
HEAD_5_6++; ; TAIL_12_5++;
  }
}


// peek: 20 pop: 20 push 1
// init counts: 0 steady counts: 100

// ClusterFusion isEliminated: false



int __number_of_iterations_6;
int __counter_6 = 0;
int __steady_6 = 0;
int __tmp_6 = 0;
int __tmp2_6 = 0;
int *__state_flag_6 = NULL;
thread_info *__thread_6 = NULL;



void save_peek_buffer__6(object_write_buffer *buf);
void load_peek_buffer__6(object_write_buffer *buf);
void save_file_pointer__6(object_write_buffer *buf);
void load_file_pointer__6(object_write_buffer *buf);

 
void init_MultiplyAccumulate__283_117__6();
inline void check_status__6();

void work_MultiplyAccumulate__283_117__6(int);


inline float __pop__6() {
float res=BUFFER_5_6[TAIL_5_6];
TAIL_5_6++;
return res;
}

inline float __pop__6(int n) {
float res=BUFFER_5_6[TAIL_5_6];
TAIL_5_6+=n;

return res;
}

inline float __peek__6(int offs) {
return BUFFER_5_6[TAIL_5_6+offs];
}



inline void __push__6(float data) {
BUFFER_6_7[HEAD_6_7]=data;
HEAD_6_7++;
}



 
void init_MultiplyAccumulate__283_117__6(){
}
void save_file_pointer__6(object_write_buffer *buf) {}
void load_file_pointer__6(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_MultiplyAccumulate__283_117__6__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  float result__281 = 0.0f;/* float */
  int x__282 = 0;/* int */

  // mark begin: SIRFilter MultiplyAccumulate

  (result__281 = ((float)0.0))/*float*/;
  for ((x__282 = 0)/*int*/; (x__282 < 10); (x__282++)) {{
      (result__281 = (result__281 + ((*(____in+0)) * (*(____in+1)))))/*float*/;
      assert(false);__pop__6(2);
    }
  }
  ((*____out++)=result__281);
  // mark end: SIRFilter MultiplyAccumulate

}}


void work_MultiplyAccumulate__283_117__6__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  float result__281 = 0.0f;/* float */
  int x__282 = 0;/* int */

  // mark begin: SIRFilter MultiplyAccumulate

  (result__281 = ((float)0.0))/*float*/;
  for ((x__282 = 0)/*int*/; (x__282 < 10); (x__282++)) {{
      (result__281 = (result__281 + ((*(____in+0)) * (*(____in+1)))))/*float*/;
      assert(false);__pop__6(2);
    }
  }
  ((*____out++)=result__281);
  // mark end: SIRFilter MultiplyAccumulate

}}


#endif // BUFFER_MERGE


 
void work_MultiplyAccumulate__283_117__6(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      float result__281 = 0.0f;/* float */
      int x__282 = 0;/* int */

      // mark begin: SIRFilter MultiplyAccumulate

      (result__281 = ((float)0.0))/*float*/;
      for ((x__282 = 0)/*int*/; (x__282 < 10); (x__282++)) {{
          (result__281 = (result__281 + (__peek__6(0) * __peek__6(1))))/*float*/;
          __pop__6(2);
        }
      }
      __push__6(result__281);
      // mark end: SIRFilter MultiplyAccumulate

    }
  }
}

// peek: 1 pop: 1 push 0
// init counts: 0 steady counts: 100

// ClusterFusion isEliminated: false



int __number_of_iterations_7;
int __counter_7 = 0;
int __steady_7 = 0;
int __tmp_7 = 0;
int __tmp2_7 = 0;
int *__state_flag_7 = NULL;
thread_info *__thread_7 = NULL;



float x__284__7 = 0.0f;
void save_peek_buffer__7(object_write_buffer *buf);
void load_peek_buffer__7(object_write_buffer *buf);
void save_file_pointer__7(object_write_buffer *buf);
void load_file_pointer__7(object_write_buffer *buf);

 
void init_FloatPrinter__287_127__7();
inline void check_status__7();

void work_FloatPrinter__287_127__7(int);


inline float __pop__7() {
float res=BUFFER_6_7[TAIL_6_7];
TAIL_6_7++;
return res;
}

inline float __pop__7(int n) {
float res=BUFFER_6_7[TAIL_6_7];
TAIL_6_7+=n;

return res;
}

inline float __peek__7(int offs) {
return BUFFER_6_7[TAIL_6_7+offs];
}


 
void init_FloatPrinter__287_127__7(){
}
void save_file_pointer__7(object_write_buffer *buf) {}
void load_file_pointer__7(object_write_buffer *buf) {}
 
void work_FloatPrinter__287_127__7(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      // mark begin: SIRFilter FloatPrinter

      ((x__284__7) = __pop__7())/*float*/;
      // mark end: SIRFilter FloatPrinter
      sum+=x__284__7;
    }
  }
}

// peek: 1 pop: 1 push 1
// init counts: 0 steady counts: 100

// ClusterFusion isEliminated: false



int __number_of_iterations_8;
int __counter_8 = 0;
int __steady_8 = 0;
int __tmp_8 = 0;
int __tmp2_8 = 0;
int *__state_flag_8 = NULL;
thread_info *__thread_8 = NULL;



void save_peek_buffer__8(object_write_buffer *buf);
void load_peek_buffer__8(object_write_buffer *buf);
void save_file_pointer__8(object_write_buffer *buf);
void load_file_pointer__8(object_write_buffer *buf);

 
void init_Identity__259_96__8();
inline void check_status__8();

void Identity__259_96__work__8(int);


inline float __pop__8() {
float res=BUFFER_1_8[TAIL_1_8];
TAIL_1_8++;
return res;
}

inline float __pop__8(int n) {
float res=BUFFER_1_8[TAIL_1_8];
TAIL_1_8+=n;

return res;
}

inline float __peek__8(int offs) {
return BUFFER_1_8[TAIL_1_8+offs];
}



inline void __push__8(float data) {
BUFFER_8_9[HEAD_8_9]=data;
HEAD_8_9++;
}



void init_Identity__259_96__8() {
}

void save_file_pointer__8(object_write_buffer *buf) {}
void load_file_pointer__8(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_Identity__259_96__8__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  // mark begin: SIRIdentity Identity

  ((*____out++)=(*____in++));
  // mark end: SIRIdentity Identity

}}


void work_Identity__259_96__8__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  // mark begin: SIRIdentity Identity

  ((*____out++)=(*____in++));
  // mark end: SIRIdentity Identity

}}


#endif // BUFFER_MERGE


void Identity__259_96__work__8(int ____n) {
    for (; 0 < ____n; ____n--) {
        __push__8(__pop__8());
    }
}


// peek: 100 pop: 100 push 100
// init counts: 0 steady counts: 1

// ClusterFusion isEliminated: false



int __number_of_iterations_9;
int __counter_9 = 0;
int __steady_9 = 0;
int __tmp_9 = 0;
int __tmp2_9 = 0;
int *__state_flag_9 = NULL;
thread_info *__thread_9 = NULL;



void save_peek_buffer__9(object_write_buffer *buf);
void load_peek_buffer__9(object_write_buffer *buf);
void save_file_pointer__9(object_write_buffer *buf);
void load_file_pointer__9(object_write_buffer *buf);

 
void init_Pre_CollapsedDataParallel_2__265_234__9();
inline void check_status__9();

void work_Pre_CollapsedDataParallel_2__265_234__9(int);


inline float __pop__9() {
float res=BUFFER_8_9[TAIL_8_9];
TAIL_8_9++;
return res;
}

inline float __pop__9(int n) {
float res=BUFFER_8_9[TAIL_8_9];
TAIL_8_9+=n;

return res;
}

inline float __peek__9(int offs) {
return BUFFER_8_9[TAIL_8_9+offs];
}



inline void __push__9(float data) {
BUFFER_9_10[HEAD_9_10]=data;
HEAD_9_10++;
}



 
void init_Pre_CollapsedDataParallel_2__265_234__9(){
}
void save_file_pointer__9(object_write_buffer *buf) {}
void load_file_pointer__9(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_Pre_CollapsedDataParallel_2__265_234__9__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  int _k__262 = 0;/* int */
  int iTimesSumOfWeights_Plus_PartialSum_k__263 = 0;/* int */
  int _i__264 = 0;/* int */

  // mark begin: SIRFilter Pre_CollapsedDataParallel_2

  // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  for ((_k__262 = 0)/*int*/; (_k__262 < 10); (_k__262++)) {{
      (iTimesSumOfWeights_Plus_PartialSum_k__263 = _k__262)/*int*/;
      for ((_i__264 = 0)/*int*/; (_i__264 < 10); (_i__264++)) {{
          ((*____out++)=(*(____in+(iTimesSumOfWeights_Plus_PartialSum_k__263 + 0))));
          (iTimesSumOfWeights_Plus_PartialSum_k__263 = (iTimesSumOfWeights_Plus_PartialSum_k__263 + 10))/*int*/;
        }
      }
    }
  }
  assert(false);__pop__9(100);
  // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  // mark end: SIRFilter Pre_CollapsedDataParallel_2

}}


void work_Pre_CollapsedDataParallel_2__265_234__9__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  int _k__262 = 0;/* int */
  int iTimesSumOfWeights_Plus_PartialSum_k__263 = 0;/* int */
  int _i__264 = 0;/* int */

  // mark begin: SIRFilter Pre_CollapsedDataParallel_2

  // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  for ((_k__262 = 0)/*int*/; (_k__262 < 10); (_k__262++)) {{
      (iTimesSumOfWeights_Plus_PartialSum_k__263 = _k__262)/*int*/;
      for ((_i__264 = 0)/*int*/; (_i__264 < 10); (_i__264++)) {{
          ((*____out++)=(*(____in+(iTimesSumOfWeights_Plus_PartialSum_k__263 + 0))));
          (iTimesSumOfWeights_Plus_PartialSum_k__263 = (iTimesSumOfWeights_Plus_PartialSum_k__263 + 10))/*int*/;
        }
      }
    }
  }
  assert(false);__pop__9(100);
  // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  // mark end: SIRFilter Pre_CollapsedDataParallel_2

}}


#endif // BUFFER_MERGE


 
void work_Pre_CollapsedDataParallel_2__265_234__9(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      int _k__262 = 0;/* int */
      int iTimesSumOfWeights_Plus_PartialSum_k__263 = 0;/* int */
      int _i__264 = 0;/* int */

      // mark begin: SIRFilter Pre_CollapsedDataParallel_2

      // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

      for ((_k__262 = 0)/*int*/; (_k__262 < 10); (_k__262++)) {{
          (iTimesSumOfWeights_Plus_PartialSum_k__263 = _k__262)/*int*/;
          for ((_i__264 = 0)/*int*/; (_i__264 < 10); (_i__264++)) {{
              __push__9(__peek__9((iTimesSumOfWeights_Plus_PartialSum_k__263 + 0)));
              (iTimesSumOfWeights_Plus_PartialSum_k__263 = (iTimesSumOfWeights_Plus_PartialSum_k__263 + 10))/*int*/;
            }
          }
        }
      }
      __pop__9(100);
      // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

      // mark end: SIRFilter Pre_CollapsedDataParallel_2

    }
  }
}

// peek: 1 pop: 1 push 10
// init counts: 0 steady counts: 100

// ClusterFusion isEliminated: false



int __number_of_iterations_10;
int __counter_10 = 0;
int __steady_10 = 0;
int __tmp_10 = 0;
int __tmp2_10 = 0;
int *__state_flag_10 = NULL;
thread_info *__thread_10 = NULL;



void save_peek_buffer__10(object_write_buffer *buf);
void load_peek_buffer__10(object_write_buffer *buf);
void save_file_pointer__10(object_write_buffer *buf);
void load_file_pointer__10(object_write_buffer *buf);

 
void init_AutoGeneratedExpander__269_193__10();
inline void check_status__10();

void work_AutoGeneratedExpander__269_193__10(int);


inline float __pop__10() {
float res=BUFFER_9_10[TAIL_9_10];
TAIL_9_10++;
return res;
}

inline float __pop__10(int n) {
float res=BUFFER_9_10[TAIL_9_10];
TAIL_9_10+=n;

return res;
}

inline float __peek__10(int offs) {
return BUFFER_9_10[TAIL_9_10+offs];
}



inline void __push__10(float data) {
BUFFER_10_11[HEAD_10_11]=data;
HEAD_10_11++;
}



 
void init_AutoGeneratedExpander__269_193__10(){
}
void save_file_pointer__10(object_write_buffer *buf) {}
void load_file_pointer__10(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_AutoGeneratedExpander__269_193__10__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  int streamItVar72__268 = 0;/* int */

  // mark begin: SIRFilter AutoGeneratedExpander

  for ((streamItVar72__268 = 0)/*int*/; (streamItVar72__268 < 10); (streamItVar72__268++)) {{
      ((*____out++)=(*(____in+0)));
    }
  }
  (*____in++);
  // mark end: SIRFilter AutoGeneratedExpander

}}


void work_AutoGeneratedExpander__269_193__10__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  int streamItVar72__268 = 0;/* int */

  // mark begin: SIRFilter AutoGeneratedExpander

  for ((streamItVar72__268 = 0)/*int*/; (streamItVar72__268 < 10); (streamItVar72__268++)) {{
      ((*____out++)=(*(____in+0)));
    }
  }
  (*____in++);
  // mark end: SIRFilter AutoGeneratedExpander

}}


#endif // BUFFER_MERGE


 
void work_AutoGeneratedExpander__269_193__10(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      int streamItVar72__268 = 0;/* int */

      // mark begin: SIRFilter AutoGeneratedExpander

      for ((streamItVar72__268 = 0)/*int*/; (streamItVar72__268 < 10); (streamItVar72__268++)) {{
          __push__10(__peek__10(0));
        }
      }
      __pop__10();
      // mark end: SIRFilter AutoGeneratedExpander

    }
  }
}

// peek: 1 pop: 1 push 1
// init counts: 0 steady counts: 1000

// ClusterFusion isEliminated: false



int __number_of_iterations_11;
int __counter_11 = 0;
int __steady_11 = 0;
int __tmp_11 = 0;
int __tmp2_11 = 0;
int *__state_flag_11 = NULL;
thread_info *__thread_11 = NULL;



void save_peek_buffer__11(object_write_buffer *buf);
void load_peek_buffer__11(object_write_buffer *buf);
void save_file_pointer__11(object_write_buffer *buf);
void load_file_pointer__11(object_write_buffer *buf);

 
void init_Identity__272_107__11();
inline void check_status__11();

void Identity__272_107__work__11(int);


inline float __pop__11() {
float res=BUFFER_10_11[TAIL_10_11];
TAIL_10_11++;
return res;
}

inline float __pop__11(int n) {
float res=BUFFER_10_11[TAIL_10_11];
TAIL_10_11+=n;

return res;
}

inline float __peek__11(int offs) {
return BUFFER_10_11[TAIL_10_11+offs];
}



inline void __push__11(float data) {
BUFFER_11_12[HEAD_11_12]=data;
HEAD_11_12++;
}



void init_Identity__272_107__11() {
}

void save_file_pointer__11(object_write_buffer *buf) {}
void load_file_pointer__11(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_Identity__272_107__11__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  // mark begin: SIRIdentity Identity

  ((*____out++)=(*____in++));
  // mark end: SIRIdentity Identity

}}


void work_Identity__272_107__11__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  // mark begin: SIRIdentity Identity

  ((*____out++)=(*____in++));
  // mark end: SIRIdentity Identity

}}


#endif // BUFFER_MERGE


void Identity__272_107__work__11(int ____n) {
    for (; 0 < ____n; ____n--) {
        __push__11(__pop__11());
    }
}


// peek: 1000 pop: 1000 push 1000
// init counts: 0 steady counts: 1

// ClusterFusion isEliminated: false



int __number_of_iterations_12;
int __counter_12 = 0;
int __steady_12 = 0;
int __tmp_12 = 0;
int __tmp2_12 = 0;
int *__state_flag_12 = NULL;
thread_info *__thread_12 = NULL;



void save_peek_buffer__12(object_write_buffer *buf);
void load_peek_buffer__12(object_write_buffer *buf);
void save_file_pointer__12(object_write_buffer *buf);
void load_file_pointer__12(object_write_buffer *buf);

 
void init_Pre_CollapsedDataParallel_2__278_235__12();
inline void check_status__12();

void work_Pre_CollapsedDataParallel_2__278_235__12(int);


inline float __pop__12() {
float res=BUFFER_11_12[TAIL_11_12];
TAIL_11_12++;
return res;
}

inline float __pop__12(int n) {
float res=BUFFER_11_12[TAIL_11_12];
TAIL_11_12+=n;

return res;
}

inline float __peek__12(int offs) {
return BUFFER_11_12[TAIL_11_12+offs];
}



inline void __push__12(float data) {
BUFFER_12_5[HEAD_12_5]=data;
HEAD_12_5++;
}



 
void init_Pre_CollapsedDataParallel_2__278_235__12(){
}
void save_file_pointer__12(object_write_buffer *buf) {}
void load_file_pointer__12(object_write_buffer *buf) {}


#ifdef BUFFER_MERGE


void work_Pre_CollapsedDataParallel_2__278_235__12__mod(int ____n, float *____in, float *____out) {
  for (; (0 < ____n); ____n--)
{
  int _k__275 = 0;/* int */
  int iTimesSumOfWeights_Plus_PartialSum_k__276 = 0;/* int */
  int _i__277 = 0;/* int */

  // mark begin: SIRFilter Pre_CollapsedDataParallel_2

  // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  for ((_k__275 = 0)/*int*/; (_k__275 < 10); (_k__275++)) {{
      (iTimesSumOfWeights_Plus_PartialSum_k__276 = _k__275)/*int*/;
      for ((_i__277 = 0)/*int*/; (_i__277 < 100); (_i__277++)) {{
          ((*____out++)=(*(____in+(iTimesSumOfWeights_Plus_PartialSum_k__276 + 0))));
          (iTimesSumOfWeights_Plus_PartialSum_k__276 = (iTimesSumOfWeights_Plus_PartialSum_k__276 + 10))/*int*/;
        }
      }
    }
  }
  assert(false);__pop__12(1000);
  // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  // mark end: SIRFilter Pre_CollapsedDataParallel_2

}}


void work_Pre_CollapsedDataParallel_2__278_235__12__mod2(int ____n, float *____in, float *____out, int s1, int s2) {
  for (; (0 < ____n); (____n--, ____in+=s1, ____out+=s2))
{
  int _k__275 = 0;/* int */
  int iTimesSumOfWeights_Plus_PartialSum_k__276 = 0;/* int */
  int _i__277 = 0;/* int */

  // mark begin: SIRFilter Pre_CollapsedDataParallel_2

  // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  for ((_k__275 = 0)/*int*/; (_k__275 < 10); (_k__275++)) {{
      (iTimesSumOfWeights_Plus_PartialSum_k__276 = _k__275)/*int*/;
      for ((_i__277 = 0)/*int*/; (_i__277 < 100); (_i__277++)) {{
          ((*____out++)=(*(____in+(iTimesSumOfWeights_Plus_PartialSum_k__276 + 0))));
          (iTimesSumOfWeights_Plus_PartialSum_k__276 = (iTimesSumOfWeights_Plus_PartialSum_k__276 + 10))/*int*/;
        }
      }
    }
  }
  assert(false);__pop__12(1000);
  // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

  // mark end: SIRFilter Pre_CollapsedDataParallel_2

}}


#endif // BUFFER_MERGE


 
void work_Pre_CollapsedDataParallel_2__278_235__12(int ____n){
  for (
  ; (0 < ____n); (____n--)) {{
      int _k__275 = 0;/* int */
      int iTimesSumOfWeights_Plus_PartialSum_k__276 = 0;/* int */
      int _i__277 = 0;/* int */

      // mark begin: SIRFilter Pre_CollapsedDataParallel_2

      // mark begin: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

      for ((_k__275 = 0)/*int*/; (_k__275 < 10); (_k__275++)) {{
          (iTimesSumOfWeights_Plus_PartialSum_k__276 = _k__275)/*int*/;
          for ((_i__277 = 0)/*int*/; (_i__277 < 100); (_i__277++)) {{
              __push__12(__peek__12((iTimesSumOfWeights_Plus_PartialSum_k__276 + 0)));
              (iTimesSumOfWeights_Plus_PartialSum_k__276 = (iTimesSumOfWeights_Plus_PartialSum_k__276 + 10))/*int*/;
            }
          }
        }
      }
      __pop__12(1000);
      // mark end: SIRSplitter WEIGHTED_ROUND_ROBIN_Splitter

      // mark end: SIRFilter Pre_CollapsedDataParallel_2

    }
  }
}

