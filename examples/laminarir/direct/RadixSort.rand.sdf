preamble {
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

static unsigned int seed;

volatile long long sum = 0;
}

sdf RadixSort {
  int IntSource_1 -> Sort_4;
  int Sort_4 -> Sort_5;
  int Sort_5 -> Sort_6;
  int Sort_6 -> Sort_7;
  int Sort_7 -> Sort_8;
  int Sort_8 -> Sort_9;
  int Sort_9 -> Sort_10;
  int Sort_10 -> Sort_11;
  int Sort_11 -> Sort_12;
  int Sort_12 -> Sort_13;
  int Sort_13 -> Sort_14;
  int Sort_14 -> IntPrinter_3;

  actor IntSource_1
  {
    state:
    {
    int SIZE_IntSource_1=16;
    int data_IntSource_1[16]  = {0};
    int index_IntSource_1 = 0;
    }
    init:
    {
      printf("Enter seed: ");
      scanf("%d", &seed);
      srand(seed);
    }
    firing:
    {
      @y1 = rand_r(&seed);
    }
    output:
      Sort_4: y1;
  }

  actor Sort_8
  {
    state:
    {
    int SIZE_Sort_8=16;
    int radix_Sort_8=16;
    }
    input:
      Sort_7: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 16) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_9: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_6
  {
    state:
    {
    int SIZE_Sort_6=16;
    int radix_Sort_6=4;
    }
    input:
      Sort_5: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 4) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_7: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_5
  {
    state:
    {
    int SIZE_Sort_5=16;
    int radix_Sort_5=2;
    }
    input:
      Sort_4: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 2) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_6: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_13
  {
    state:
    {
    int SIZE_Sort_13=16;
    int radix_Sort_13=512;
    }
    input:
      Sort_12: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 512) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_14: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_9
  {
    state:
    {
    int SIZE_Sort_9=16;
    int radix_Sort_9=32;
    }
    input:
      Sort_8: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 32) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_10: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor IntPrinter_3
  {
    state:
    {
    int x_IntPrinter_3 = 0;
    }
    input:
      Sort_14: x1;
    firing:
    {
      x_IntPrinter_3 = @x1;
      sum += @x1;
    }
  }

  actor Sort_11
  {
    state:
    {
    int SIZE_Sort_11=16;
    int radix_Sort_11=128;
    }
    input:
      Sort_10: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 128) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_12: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_10
  {
    state:
    {
    int SIZE_Sort_10=16;
    int radix_Sort_10=64;
    }
    input:
      Sort_9: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 64) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_11: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_4
  {
    state:
    {
    int SIZE_Sort_4=16;
    int radix_Sort_4=1;
    }
    input:
      IntSource_1: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 1) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_5: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_14
  {
    state:
    {
    int SIZE_Sort_14=16;
    int radix_Sort_14=1024;
    }
    input:
      Sort_13: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 1024) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      IntPrinter_3: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_12
  {
    state:
    {
    int SIZE_Sort_12=16;
    int radix_Sort_12=256;
    }
    input:
      Sort_11: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 256) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_13: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_7
  {
    state:
    {
    int SIZE_Sort_7=16;
    int radix_Sort_7=8;
    }
    input:
      Sort_6: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int out_array[16]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
      int out_ctr = 0;
      int ordering[16]  = {0};
      int j = 0;
      
      {
        int current = @x1;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[0] = current;
          j = (0 + 1);
        }
      }
      {
        int current = @x2;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x3;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x4;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x5;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x6;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x7;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x8;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x9;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x10;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x11;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x12;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x13;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x14;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x15;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      {
        int current = @x16;
        if (((current & 8) == 0)) {
          out_array[out_ctr++]=current;
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
;
      {
      int i;
      for (i=0; (i < j); i++) {
        out_array[out_ctr++]=ordering[i];
      }
      };
      @y1 = out_array[0];
      @y2 = out_array[1];
      @y3 = out_array[2];
      @y4 = out_array[3];
      @y5 = out_array[4];
      @y6 = out_array[5];
      @y7 = out_array[6];
      @y8 = out_array[7];
      @y9 = out_array[8];
      @y10 = out_array[9];
      @y11 = out_array[10];
      @y12 = out_array[11];
      @y13 = out_array[12];
      @y14 = out_array[13];
      @y15 = out_array[14];
      @y16 = out_array[15];
    }
    output:
      Sort_8: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

}

postamble {
int main(){
  RadixSort();
  printf("sum: %lld\n", sum);
  return 0;
}
}
