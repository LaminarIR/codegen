preamble {
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

static unsigned int seed;

const int PRINTINFO = 0;
const int PLAINTEXT = 0;
const int USERKEY = 1;
const int CIPHERTEXT = 2;
const int MAXROUNDS = 16;
const int USERKEYS[34][2]  = {{0,0},
{-1,-1},
{805306368,0},
{286331153,286331153},
{19088743,-1985229329},
{286331153,286331153},
{0,0},
{-19088744,1985229328},
{2090930245,1243246167},
{20044129,-1648281746},
{127996734,1242244742},
{944334668,637677982},
{79238586,1140766134},
{18069872,-46861618},
{24179061,1183823334},
{1126793133,954430462},
{128390000,1171925526},
{73961732,-1023591633},
{936405941,382432582},
{520627725,448939614},
{1480598372,448422262},
{39327254,1177137159},
{1232682684,2041783695},
{1336958485,363557799},
{1240030573,1285695935},
{25366748,1083909846},
{475561756,328355823},
{16843009,16843009},
{522133279,235802126},
{-520167170,-234950146},
{0,0},
{-1,-1},
{19088743,-1985229329},
{-19088744,1985229328}
};
const int PC1[56]  = {57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4};
const int PC2[48]  = {14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};
const int RT[16]  = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};
const int IP[64]  = {58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
const int E[48]  = {32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
const int P[32]  = {16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
const int IPm1[64]  = {40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25};
const int S1[4][16]  = {{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
};
const int S2[4][16]  = {{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
};
const int S3[4][16]  = {{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
};
const int S4[4][16]  = {{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
};
const int S5[4][16]  = {{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
};
const int S6[4][16]  = {{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
};
const int S7[4][16]  = {{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
};
const int S8[4][16]  = {{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
};
volatile long long sum = 0;
}

sdf DES {
  int F_PlainTextSource_4 -> IntoBits_5;
  int IntoBits_5 -> doIP_7;
  int doIP_7 -> SP_DEScoder_8_split(1);
  int SP_DEScoder_8_split(1) -> SP_nextR_28_split(64);
  int SP_nextR_28_split(32) -> SP_f_32_split(1);
  int SP_f_32_split(1) -> doE_36;
  int doE_36 -> SP_f_32_join(1);
  int SP_f_32_split(1) -> f_KeySchedule_38;
  int f_KeySchedule_38 -> SP_f_32_join(1);
  int SP_f_32_join(2) -> Xor_33;
  int Xor_33 -> Sboxes_34_split(48);
  int Sboxes_34_split(6) -> Sbox_40;
  int Sbox_40 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_41;
  int Sbox_41 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_42;
  int Sbox_42 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_43;
  int Sbox_43 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_44;
  int Sbox_44 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_45;
  int Sbox_45 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_46;
  int Sbox_46 -> Sboxes_34_join(4);
  int Sboxes_34_split(6) -> Sbox_47;
  int Sbox_47 -> Sboxes_34_join(4);
  int Sboxes_34_join(32) -> doP_35;
  int doP_35 -> SP_nextR_28_join(1);
  int SP_nextR_28_split(32) -> streamit_library_Identity_31;
  int streamit_library_Identity_31 -> SP_nextR_28_join(1);
  int SP_nextR_28_join(2) -> Xor_29;
  int Xor_29 -> SP_DEScoder_8_join(32);
  int SP_DEScoder_8_split(1) -> AnonFilter_a0_51;
  int AnonFilter_a0_51 -> SP_DEScoder_8_join(32);
  int SP_DEScoder_8_join(64) -> SP_DEScoder_9_split(1);
  int SP_DEScoder_9_split(1) -> SP_nextR_55_split(64);
  int SP_nextR_55_split(32) -> SP_f_59_split(1);
  int SP_f_59_split(1) -> doE_63;
  int doE_63 -> SP_f_59_join(1);
  int SP_f_59_split(1) -> f_KeySchedule_65;
  int f_KeySchedule_65 -> SP_f_59_join(1);
  int SP_f_59_join(2) -> Xor_60;
  int Xor_60 -> Sboxes_61_split(48);
  int Sboxes_61_split(6) -> Sbox_67;
  int Sbox_67 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_68;
  int Sbox_68 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_69;
  int Sbox_69 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_70;
  int Sbox_70 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_71;
  int Sbox_71 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_72;
  int Sbox_72 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_73;
  int Sbox_73 -> Sboxes_61_join(4);
  int Sboxes_61_split(6) -> Sbox_74;
  int Sbox_74 -> Sboxes_61_join(4);
  int Sboxes_61_join(32) -> doP_62;
  int doP_62 -> SP_nextR_55_join(1);
  int SP_nextR_55_split(32) -> streamit_library_Identity_58;
  int streamit_library_Identity_58 -> SP_nextR_55_join(1);
  int SP_nextR_55_join(2) -> Xor_56;
  int Xor_56 -> SP_DEScoder_9_join(32);
  int SP_DEScoder_9_split(1) -> AnonFilter_a0_78;
  int AnonFilter_a0_78 -> SP_DEScoder_9_join(32);
  int SP_DEScoder_9_join(64) -> SP_DEScoder_10_split(1);
  int SP_DEScoder_10_split(1) -> SP_nextR_82_split(64);
  int SP_nextR_82_split(32) -> SP_f_86_split(1);
  int SP_f_86_split(1) -> doE_90;
  int doE_90 -> SP_f_86_join(1);
  int SP_f_86_split(1) -> f_KeySchedule_92;
  int f_KeySchedule_92 -> SP_f_86_join(1);
  int SP_f_86_join(2) -> Xor_87;
  int Xor_87 -> Sboxes_88_split(48);
  int Sboxes_88_split(6) -> Sbox_94;
  int Sbox_94 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_95;
  int Sbox_95 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_96;
  int Sbox_96 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_97;
  int Sbox_97 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_98;
  int Sbox_98 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_99;
  int Sbox_99 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_100;
  int Sbox_100 -> Sboxes_88_join(4);
  int Sboxes_88_split(6) -> Sbox_101;
  int Sbox_101 -> Sboxes_88_join(4);
  int Sboxes_88_join(32) -> doP_89;
  int doP_89 -> SP_nextR_82_join(1);
  int SP_nextR_82_split(32) -> streamit_library_Identity_85;
  int streamit_library_Identity_85 -> SP_nextR_82_join(1);
  int SP_nextR_82_join(2) -> Xor_83;
  int Xor_83 -> SP_DEScoder_10_join(32);
  int SP_DEScoder_10_split(1) -> AnonFilter_a0_105;
  int AnonFilter_a0_105 -> SP_DEScoder_10_join(32);
  int SP_DEScoder_10_join(64) -> SP_DEScoder_11_split(1);
  int SP_DEScoder_11_split(1) -> SP_nextR_109_split(64);
  int SP_nextR_109_split(32) -> SP_f_113_split(1);
  int SP_f_113_split(1) -> doE_117;
  int doE_117 -> SP_f_113_join(1);
  int SP_f_113_split(1) -> f_KeySchedule_119;
  int f_KeySchedule_119 -> SP_f_113_join(1);
  int SP_f_113_join(2) -> Xor_114;
  int Xor_114 -> Sboxes_115_split(48);
  int Sboxes_115_split(6) -> Sbox_121;
  int Sbox_121 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_122;
  int Sbox_122 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_123;
  int Sbox_123 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_124;
  int Sbox_124 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_125;
  int Sbox_125 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_126;
  int Sbox_126 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_127;
  int Sbox_127 -> Sboxes_115_join(4);
  int Sboxes_115_split(6) -> Sbox_128;
  int Sbox_128 -> Sboxes_115_join(4);
  int Sboxes_115_join(32) -> doP_116;
  int doP_116 -> SP_nextR_109_join(1);
  int SP_nextR_109_split(32) -> streamit_library_Identity_112;
  int streamit_library_Identity_112 -> SP_nextR_109_join(1);
  int SP_nextR_109_join(2) -> Xor_110;
  int Xor_110 -> SP_DEScoder_11_join(32);
  int SP_DEScoder_11_split(1) -> AnonFilter_a0_132;
  int AnonFilter_a0_132 -> SP_DEScoder_11_join(32);
  int SP_DEScoder_11_join(64) -> SP_DEScoder_12_split(1);
  int SP_DEScoder_12_split(1) -> SP_nextR_136_split(64);
  int SP_nextR_136_split(32) -> SP_f_140_split(1);
  int SP_f_140_split(1) -> doE_144;
  int doE_144 -> SP_f_140_join(1);
  int SP_f_140_split(1) -> f_KeySchedule_146;
  int f_KeySchedule_146 -> SP_f_140_join(1);
  int SP_f_140_join(2) -> Xor_141;
  int Xor_141 -> Sboxes_142_split(48);
  int Sboxes_142_split(6) -> Sbox_148;
  int Sbox_148 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_149;
  int Sbox_149 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_150;
  int Sbox_150 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_151;
  int Sbox_151 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_152;
  int Sbox_152 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_153;
  int Sbox_153 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_154;
  int Sbox_154 -> Sboxes_142_join(4);
  int Sboxes_142_split(6) -> Sbox_155;
  int Sbox_155 -> Sboxes_142_join(4);
  int Sboxes_142_join(32) -> doP_143;
  int doP_143 -> SP_nextR_136_join(1);
  int SP_nextR_136_split(32) -> streamit_library_Identity_139;
  int streamit_library_Identity_139 -> SP_nextR_136_join(1);
  int SP_nextR_136_join(2) -> Xor_137;
  int Xor_137 -> SP_DEScoder_12_join(32);
  int SP_DEScoder_12_split(1) -> AnonFilter_a0_159;
  int AnonFilter_a0_159 -> SP_DEScoder_12_join(32);
  int SP_DEScoder_12_join(64) -> SP_DEScoder_13_split(1);
  int SP_DEScoder_13_split(1) -> SP_nextR_163_split(64);
  int SP_nextR_163_split(32) -> SP_f_167_split(1);
  int SP_f_167_split(1) -> doE_171;
  int doE_171 -> SP_f_167_join(1);
  int SP_f_167_split(1) -> f_KeySchedule_173;
  int f_KeySchedule_173 -> SP_f_167_join(1);
  int SP_f_167_join(2) -> Xor_168;
  int Xor_168 -> Sboxes_169_split(48);
  int Sboxes_169_split(6) -> Sbox_175;
  int Sbox_175 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_176;
  int Sbox_176 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_177;
  int Sbox_177 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_178;
  int Sbox_178 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_179;
  int Sbox_179 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_180;
  int Sbox_180 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_181;
  int Sbox_181 -> Sboxes_169_join(4);
  int Sboxes_169_split(6) -> Sbox_182;
  int Sbox_182 -> Sboxes_169_join(4);
  int Sboxes_169_join(32) -> doP_170;
  int doP_170 -> SP_nextR_163_join(1);
  int SP_nextR_163_split(32) -> streamit_library_Identity_166;
  int streamit_library_Identity_166 -> SP_nextR_163_join(1);
  int SP_nextR_163_join(2) -> Xor_164;
  int Xor_164 -> SP_DEScoder_13_join(32);
  int SP_DEScoder_13_split(1) -> AnonFilter_a0_186;
  int AnonFilter_a0_186 -> SP_DEScoder_13_join(32);
  int SP_DEScoder_13_join(64) -> SP_DEScoder_14_split(1);
  int SP_DEScoder_14_split(1) -> SP_nextR_190_split(64);
  int SP_nextR_190_split(32) -> SP_f_194_split(1);
  int SP_f_194_split(1) -> doE_198;
  int doE_198 -> SP_f_194_join(1);
  int SP_f_194_split(1) -> f_KeySchedule_200;
  int f_KeySchedule_200 -> SP_f_194_join(1);
  int SP_f_194_join(2) -> Xor_195;
  int Xor_195 -> Sboxes_196_split(48);
  int Sboxes_196_split(6) -> Sbox_202;
  int Sbox_202 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_203;
  int Sbox_203 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_204;
  int Sbox_204 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_205;
  int Sbox_205 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_206;
  int Sbox_206 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_207;
  int Sbox_207 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_208;
  int Sbox_208 -> Sboxes_196_join(4);
  int Sboxes_196_split(6) -> Sbox_209;
  int Sbox_209 -> Sboxes_196_join(4);
  int Sboxes_196_join(32) -> doP_197;
  int doP_197 -> SP_nextR_190_join(1);
  int SP_nextR_190_split(32) -> streamit_library_Identity_193;
  int streamit_library_Identity_193 -> SP_nextR_190_join(1);
  int SP_nextR_190_join(2) -> Xor_191;
  int Xor_191 -> SP_DEScoder_14_join(32);
  int SP_DEScoder_14_split(1) -> AnonFilter_a0_213;
  int AnonFilter_a0_213 -> SP_DEScoder_14_join(32);
  int SP_DEScoder_14_join(64) -> SP_DEScoder_15_split(1);
  int SP_DEScoder_15_split(1) -> SP_nextR_217_split(64);
  int SP_nextR_217_split(32) -> SP_f_221_split(1);
  int SP_f_221_split(1) -> doE_225;
  int doE_225 -> SP_f_221_join(1);
  int SP_f_221_split(1) -> f_KeySchedule_227;
  int f_KeySchedule_227 -> SP_f_221_join(1);
  int SP_f_221_join(2) -> Xor_222;
  int Xor_222 -> Sboxes_223_split(48);
  int Sboxes_223_split(6) -> Sbox_229;
  int Sbox_229 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_230;
  int Sbox_230 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_231;
  int Sbox_231 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_232;
  int Sbox_232 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_233;
  int Sbox_233 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_234;
  int Sbox_234 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_235;
  int Sbox_235 -> Sboxes_223_join(4);
  int Sboxes_223_split(6) -> Sbox_236;
  int Sbox_236 -> Sboxes_223_join(4);
  int Sboxes_223_join(32) -> doP_224;
  int doP_224 -> SP_nextR_217_join(1);
  int SP_nextR_217_split(32) -> streamit_library_Identity_220;
  int streamit_library_Identity_220 -> SP_nextR_217_join(1);
  int SP_nextR_217_join(2) -> Xor_218;
  int Xor_218 -> SP_DEScoder_15_join(32);
  int SP_DEScoder_15_split(1) -> AnonFilter_a0_240;
  int AnonFilter_a0_240 -> SP_DEScoder_15_join(32);
  int SP_DEScoder_15_join(64) -> SP_DEScoder_16_split(1);
  int SP_DEScoder_16_split(1) -> SP_nextR_244_split(64);
  int SP_nextR_244_split(32) -> SP_f_248_split(1);
  int SP_f_248_split(1) -> doE_252;
  int doE_252 -> SP_f_248_join(1);
  int SP_f_248_split(1) -> f_KeySchedule_254;
  int f_KeySchedule_254 -> SP_f_248_join(1);
  int SP_f_248_join(2) -> Xor_249;
  int Xor_249 -> Sboxes_250_split(48);
  int Sboxes_250_split(6) -> Sbox_256;
  int Sbox_256 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_257;
  int Sbox_257 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_258;
  int Sbox_258 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_259;
  int Sbox_259 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_260;
  int Sbox_260 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_261;
  int Sbox_261 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_262;
  int Sbox_262 -> Sboxes_250_join(4);
  int Sboxes_250_split(6) -> Sbox_263;
  int Sbox_263 -> Sboxes_250_join(4);
  int Sboxes_250_join(32) -> doP_251;
  int doP_251 -> SP_nextR_244_join(1);
  int SP_nextR_244_split(32) -> streamit_library_Identity_247;
  int streamit_library_Identity_247 -> SP_nextR_244_join(1);
  int SP_nextR_244_join(2) -> Xor_245;
  int Xor_245 -> SP_DEScoder_16_join(32);
  int SP_DEScoder_16_split(1) -> AnonFilter_a0_267;
  int AnonFilter_a0_267 -> SP_DEScoder_16_join(32);
  int SP_DEScoder_16_join(64) -> SP_DEScoder_17_split(1);
  int SP_DEScoder_17_split(1) -> SP_nextR_271_split(64);
  int SP_nextR_271_split(32) -> SP_f_275_split(1);
  int SP_f_275_split(1) -> doE_279;
  int doE_279 -> SP_f_275_join(1);
  int SP_f_275_split(1) -> f_KeySchedule_281;
  int f_KeySchedule_281 -> SP_f_275_join(1);
  int SP_f_275_join(2) -> Xor_276;
  int Xor_276 -> Sboxes_277_split(48);
  int Sboxes_277_split(6) -> Sbox_283;
  int Sbox_283 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_284;
  int Sbox_284 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_285;
  int Sbox_285 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_286;
  int Sbox_286 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_287;
  int Sbox_287 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_288;
  int Sbox_288 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_289;
  int Sbox_289 -> Sboxes_277_join(4);
  int Sboxes_277_split(6) -> Sbox_290;
  int Sbox_290 -> Sboxes_277_join(4);
  int Sboxes_277_join(32) -> doP_278;
  int doP_278 -> SP_nextR_271_join(1);
  int SP_nextR_271_split(32) -> streamit_library_Identity_274;
  int streamit_library_Identity_274 -> SP_nextR_271_join(1);
  int SP_nextR_271_join(2) -> Xor_272;
  int Xor_272 -> SP_DEScoder_17_join(32);
  int SP_DEScoder_17_split(1) -> AnonFilter_a0_294;
  int AnonFilter_a0_294 -> SP_DEScoder_17_join(32);
  int SP_DEScoder_17_join(64) -> SP_DEScoder_18_split(1);
  int SP_DEScoder_18_split(1) -> SP_nextR_298_split(64);
  int SP_nextR_298_split(32) -> SP_f_302_split(1);
  int SP_f_302_split(1) -> doE_306;
  int doE_306 -> SP_f_302_join(1);
  int SP_f_302_split(1) -> f_KeySchedule_308;
  int f_KeySchedule_308 -> SP_f_302_join(1);
  int SP_f_302_join(2) -> Xor_303;
  int Xor_303 -> Sboxes_304_split(48);
  int Sboxes_304_split(6) -> Sbox_310;
  int Sbox_310 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_311;
  int Sbox_311 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_312;
  int Sbox_312 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_313;
  int Sbox_313 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_314;
  int Sbox_314 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_315;
  int Sbox_315 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_316;
  int Sbox_316 -> Sboxes_304_join(4);
  int Sboxes_304_split(6) -> Sbox_317;
  int Sbox_317 -> Sboxes_304_join(4);
  int Sboxes_304_join(32) -> doP_305;
  int doP_305 -> SP_nextR_298_join(1);
  int SP_nextR_298_split(32) -> streamit_library_Identity_301;
  int streamit_library_Identity_301 -> SP_nextR_298_join(1);
  int SP_nextR_298_join(2) -> Xor_299;
  int Xor_299 -> SP_DEScoder_18_join(32);
  int SP_DEScoder_18_split(1) -> AnonFilter_a0_321;
  int AnonFilter_a0_321 -> SP_DEScoder_18_join(32);
  int SP_DEScoder_18_join(64) -> SP_DEScoder_19_split(1);
  int SP_DEScoder_19_split(1) -> SP_nextR_325_split(64);
  int SP_nextR_325_split(32) -> SP_f_329_split(1);
  int SP_f_329_split(1) -> doE_333;
  int doE_333 -> SP_f_329_join(1);
  int SP_f_329_split(1) -> f_KeySchedule_335;
  int f_KeySchedule_335 -> SP_f_329_join(1);
  int SP_f_329_join(2) -> Xor_330;
  int Xor_330 -> Sboxes_331_split(48);
  int Sboxes_331_split(6) -> Sbox_337;
  int Sbox_337 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_338;
  int Sbox_338 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_339;
  int Sbox_339 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_340;
  int Sbox_340 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_341;
  int Sbox_341 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_342;
  int Sbox_342 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_343;
  int Sbox_343 -> Sboxes_331_join(4);
  int Sboxes_331_split(6) -> Sbox_344;
  int Sbox_344 -> Sboxes_331_join(4);
  int Sboxes_331_join(32) -> doP_332;
  int doP_332 -> SP_nextR_325_join(1);
  int SP_nextR_325_split(32) -> streamit_library_Identity_328;
  int streamit_library_Identity_328 -> SP_nextR_325_join(1);
  int SP_nextR_325_join(2) -> Xor_326;
  int Xor_326 -> SP_DEScoder_19_join(32);
  int SP_DEScoder_19_split(1) -> AnonFilter_a0_348;
  int AnonFilter_a0_348 -> SP_DEScoder_19_join(32);
  int SP_DEScoder_19_join(64) -> SP_DEScoder_20_split(1);
  int SP_DEScoder_20_split(1) -> SP_nextR_352_split(64);
  int SP_nextR_352_split(32) -> SP_f_356_split(1);
  int SP_f_356_split(1) -> doE_360;
  int doE_360 -> SP_f_356_join(1);
  int SP_f_356_split(1) -> f_KeySchedule_362;
  int f_KeySchedule_362 -> SP_f_356_join(1);
  int SP_f_356_join(2) -> Xor_357;
  int Xor_357 -> Sboxes_358_split(48);
  int Sboxes_358_split(6) -> Sbox_364;
  int Sbox_364 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_365;
  int Sbox_365 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_366;
  int Sbox_366 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_367;
  int Sbox_367 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_368;
  int Sbox_368 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_369;
  int Sbox_369 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_370;
  int Sbox_370 -> Sboxes_358_join(4);
  int Sboxes_358_split(6) -> Sbox_371;
  int Sbox_371 -> Sboxes_358_join(4);
  int Sboxes_358_join(32) -> doP_359;
  int doP_359 -> SP_nextR_352_join(1);
  int SP_nextR_352_split(32) -> streamit_library_Identity_355;
  int streamit_library_Identity_355 -> SP_nextR_352_join(1);
  int SP_nextR_352_join(2) -> Xor_353;
  int Xor_353 -> SP_DEScoder_20_join(32);
  int SP_DEScoder_20_split(1) -> AnonFilter_a0_375;
  int AnonFilter_a0_375 -> SP_DEScoder_20_join(32);
  int SP_DEScoder_20_join(64) -> SP_DEScoder_21_split(1);
  int SP_DEScoder_21_split(1) -> SP_nextR_379_split(64);
  int SP_nextR_379_split(32) -> SP_f_383_split(1);
  int SP_f_383_split(1) -> doE_387;
  int doE_387 -> SP_f_383_join(1);
  int SP_f_383_split(1) -> f_KeySchedule_389;
  int f_KeySchedule_389 -> SP_f_383_join(1);
  int SP_f_383_join(2) -> Xor_384;
  int Xor_384 -> Sboxes_385_split(48);
  int Sboxes_385_split(6) -> Sbox_391;
  int Sbox_391 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_392;
  int Sbox_392 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_393;
  int Sbox_393 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_394;
  int Sbox_394 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_395;
  int Sbox_395 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_396;
  int Sbox_396 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_397;
  int Sbox_397 -> Sboxes_385_join(4);
  int Sboxes_385_split(6) -> Sbox_398;
  int Sbox_398 -> Sboxes_385_join(4);
  int Sboxes_385_join(32) -> doP_386;
  int doP_386 -> SP_nextR_379_join(1);
  int SP_nextR_379_split(32) -> streamit_library_Identity_382;
  int streamit_library_Identity_382 -> SP_nextR_379_join(1);
  int SP_nextR_379_join(2) -> Xor_380;
  int Xor_380 -> SP_DEScoder_21_join(32);
  int SP_DEScoder_21_split(1) -> AnonFilter_a0_402;
  int AnonFilter_a0_402 -> SP_DEScoder_21_join(32);
  int SP_DEScoder_21_join(64) -> SP_DEScoder_22_split(1);
  int SP_DEScoder_22_split(1) -> SP_nextR_406_split(64);
  int SP_nextR_406_split(32) -> SP_f_410_split(1);
  int SP_f_410_split(1) -> doE_414;
  int doE_414 -> SP_f_410_join(1);
  int SP_f_410_split(1) -> f_KeySchedule_416;
  int f_KeySchedule_416 -> SP_f_410_join(1);
  int SP_f_410_join(2) -> Xor_411;
  int Xor_411 -> Sboxes_412_split(48);
  int Sboxes_412_split(6) -> Sbox_418;
  int Sbox_418 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_419;
  int Sbox_419 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_420;
  int Sbox_420 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_421;
  int Sbox_421 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_422;
  int Sbox_422 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_423;
  int Sbox_423 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_424;
  int Sbox_424 -> Sboxes_412_join(4);
  int Sboxes_412_split(6) -> Sbox_425;
  int Sbox_425 -> Sboxes_412_join(4);
  int Sboxes_412_join(32) -> doP_413;
  int doP_413 -> SP_nextR_406_join(1);
  int SP_nextR_406_split(32) -> streamit_library_Identity_409;
  int streamit_library_Identity_409 -> SP_nextR_406_join(1);
  int SP_nextR_406_join(2) -> Xor_407;
  int Xor_407 -> SP_DEScoder_22_join(32);
  int SP_DEScoder_22_split(1) -> AnonFilter_a0_429;
  int AnonFilter_a0_429 -> SP_DEScoder_22_join(32);
  int SP_DEScoder_22_join(64) -> SP_DEScoder_23_split(1);
  int SP_DEScoder_23_split(1) -> SP_nextR_433_split(64);
  int SP_nextR_433_split(32) -> SP_f_437_split(1);
  int SP_f_437_split(1) -> doE_441;
  int doE_441 -> SP_f_437_join(1);
  int SP_f_437_split(1) -> f_KeySchedule_443;
  int f_KeySchedule_443 -> SP_f_437_join(1);
  int SP_f_437_join(2) -> Xor_438;
  int Xor_438 -> Sboxes_439_split(48);
  int Sboxes_439_split(6) -> Sbox_445;
  int Sbox_445 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_446;
  int Sbox_446 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_447;
  int Sbox_447 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_448;
  int Sbox_448 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_449;
  int Sbox_449 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_450;
  int Sbox_450 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_451;
  int Sbox_451 -> Sboxes_439_join(4);
  int Sboxes_439_split(6) -> Sbox_452;
  int Sbox_452 -> Sboxes_439_join(4);
  int Sboxes_439_join(32) -> doP_440;
  int doP_440 -> SP_nextR_433_join(1);
  int SP_nextR_433_split(32) -> streamit_library_Identity_436;
  int streamit_library_Identity_436 -> SP_nextR_433_join(1);
  int SP_nextR_433_join(2) -> Xor_434;
  int Xor_434 -> SP_DEScoder_23_join(32);
  int SP_DEScoder_23_split(1) -> AnonFilter_a0_456;
  int AnonFilter_a0_456 -> SP_DEScoder_23_join(32);
  int SP_DEScoder_23_join(64) -> CrissCross_24;
  int CrissCross_24 -> doIPm1_25;
  int doIPm1_25 -> BitstoInts_461;
  int BitstoInts_461 -> F_HexPrinter_462;

  actor Xor_303
  {
    state:
    {
    int n_Xor_303=2;
    }
    input:
      SP_f_302_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_304_split: y1;
  }

  actor doP_440
  {
    state:
    {
    }
    input:
      Sboxes_439_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_433_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_98
  {
    state:
    {
    int table_Sbox_98[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_98[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_92
  {
    state:
    {
    int vector_f_KeySchedule_92=7;
    int round_f_KeySchedule_92=2;
    int keys_f_KeySchedule_92[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_92[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_86_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_92[2][i]);
      };
    }
    output:
      SP_f_86_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor doP_116
  {
    state:
    {
    }
    input:
      Sboxes_115_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_109_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_289
  {
    state:
    {
    int table_Sbox_289[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_289[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor Sbox_151
  {
    state:
    {
    int table_Sbox_151[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_151[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor Sbox_311
  {
    state:
    {
    int table_Sbox_311[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_311[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_456
  {
    state:
    {
    }
    input:
      SP_DEScoder_23_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_23_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor f_KeySchedule_173
  {
    state:
    {
    int vector_f_KeySchedule_173=7;
    int round_f_KeySchedule_173=5;
    int keys_f_KeySchedule_173[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_173[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_167_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_173[5][i]);
      };
    }
    output:
      SP_f_167_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_182
  {
    state:
    {
    int table_Sbox_182[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_182[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor Sbox_446
  {
    state:
    {
    int table_Sbox_446[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_446[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Sbox_74
  {
    state:
    {
    int table_Sbox_74[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_74[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor doP_35
  {
    state:
    {
    }
    input:
      Sboxes_34_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_28_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_231
  {
    state:
    {
    int table_Sbox_231[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_231[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_119
  {
    state:
    {
    int vector_f_KeySchedule_119=7;
    int round_f_KeySchedule_119=3;
    int keys_f_KeySchedule_119[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_119[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_113_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_119[3][i]);
      };
    }
    output:
      SP_f_113_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor streamit_library_Identity_328
  {
    state:
    {
    }
    input:
      SP_nextR_325_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_325_join: y1;
  }

  actor Sbox_96
  {
    state:
    {
    int table_Sbox_96[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_96[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor doIP_7
  {
    state:
    {
    }
    input:
      IntoBits_5: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      {
      int i;
      for (i=0; (i < 64); i++) {
        push(peek((IP[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 64); i++) {
        pop();
      }
      };
    }
    output:
      SP_DEScoder_8_split: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48,y49,y50,y51,y52,y53,y54,y55,y56,y57,y58,y59,y60,y61,y62,y63,y64;
  }

  actor Sbox_364
  {
    state:
    {
    int table_Sbox_364[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_364[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_51
  {
    state:
    {
    }
    input:
      SP_DEScoder_8_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_8_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor AnonFilter_a0_240
  {
    state:
    {
    }
    input:
      SP_DEScoder_15_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_15_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor f_KeySchedule_65
  {
    state:
    {
    int vector_f_KeySchedule_65=7;
    int round_f_KeySchedule_65=1;
    int keys_f_KeySchedule_65[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_65[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_59_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_65[1][i]);
      };
    }
    output:
      SP_f_59_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor doE_360
  {
    state:
    {
    }
    input:
      SP_f_356_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_356_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor doP_359
  {
    state:
    {
    }
    input:
      Sboxes_358_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_352_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_316
  {
    state:
    {
    int table_Sbox_316[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_316[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor Xor_218
  {
    state:
    {
    int n_Xor_218=2;
    }
    input:
      SP_nextR_217_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_15_join: y1;
  }

  actor Sbox_344
  {
    state:
    {
    int table_Sbox_344[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_344[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor Xor_411
  {
    state:
    {
    int n_Xor_411=2;
    }
    input:
      SP_f_410_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_412_split: y1;
  }

  actor Sbox_449
  {
    state:
    {
    int table_Sbox_449[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_449[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor doE_279
  {
    state:
    {
    }
    input:
      SP_f_275_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_275_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_205
  {
    state:
    {
    int table_Sbox_205[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_205[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor Sbox_393
  {
    state:
    {
    int table_Sbox_393[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_393[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_126
  {
    state:
    {
    int table_Sbox_126[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_126[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_402
  {
    state:
    {
    }
    input:
      SP_DEScoder_21_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_21_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_392
  {
    state:
    {
    int table_Sbox_392[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_392[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_450
  {
    state:
    {
    int table_Sbox_450[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_450[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Xor_249
  {
    state:
    {
    int n_Xor_249=2;
    }
    input:
      SP_f_248_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_250_split: y1;
  }

  actor doE_144
  {
    state:
    {
    }
    input:
      SP_f_140_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_140_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_230
  {
    state:
    {
    int table_Sbox_230[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_230[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor IntoBits_5
  {
    state:
    {
    }
    input:
      F_PlainTextSource_4: x1;
    firing:
    {
      int v = pop();
      int m = 1;
      {
      int i;
      for (i=0; (i < 32); i++) {
        if ((((v & m) >> i) != 0)) {
          push(1);
        } else {
          push(0);
        }
        m = (m << 1);
      }
      };
    }
    output:
      doIP_7: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_69
  {
    state:
    {
    int table_Sbox_69[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_69[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor Sbox_258
  {
    state:
    {
    int table_Sbox_258[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_258[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_186
  {
    state:
    {
    }
    input:
      SP_DEScoder_13_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_13_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Xor_434
  {
    state:
    {
    int n_Xor_434=2;
    }
    input:
      SP_nextR_433_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_23_join: y1;
  }

  actor Sbox_150
  {
    state:
    {
    int table_Sbox_150[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_150[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor Xor_110
  {
    state:
    {
    int n_Xor_110=2;
    }
    input:
      SP_nextR_109_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_11_join: y1;
  }

  actor Xor_114
  {
    state:
    {
    int n_Xor_114=2;
    }
    input:
      SP_f_113_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_115_split: y1;
  }

  actor Sbox_100
  {
    state:
    {
    int table_Sbox_100[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_100[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor Sbox_70
  {
    state:
    {
    int table_Sbox_70[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_70[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor Sbox_177
  {
    state:
    {
    int table_Sbox_177[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_177[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor doE_414
  {
    state:
    {
    }
    input:
      SP_f_410_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_410_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_99
  {
    state:
    {
    int table_Sbox_99[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_99[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor Xor_380
  {
    state:
    {
    int n_Xor_380=2;
    }
    input:
      SP_nextR_379_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_21_join: y1;
  }

  actor Sbox_314
  {
    state:
    {
    int table_Sbox_314[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_314[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor Sbox_422
  {
    state:
    {
    int table_Sbox_422[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_422[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor Sbox_179
  {
    state:
    {
    int table_Sbox_179[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_179[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor Sbox_310
  {
    state:
    {
    int table_Sbox_310[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_310[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor Sbox_290
  {
    state:
    {
    int table_Sbox_290[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_290[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor Sbox_68
  {
    state:
    {
    int table_Sbox_68[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_68[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor Sbox_101
  {
    state:
    {
    int table_Sbox_101[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_101[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor doE_36
  {
    state:
    {
    }
    input:
      SP_f_32_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_32_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor doE_333
  {
    state:
    {
    }
    input:
      SP_f_329_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_329_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_148
  {
    state:
    {
    int table_Sbox_148[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_148[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_382
  {
    state:
    {
    }
    input:
      SP_nextR_379_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_379_join: y1;
  }

  actor f_KeySchedule_200
  {
    state:
    {
    int vector_f_KeySchedule_200=7;
    int round_f_KeySchedule_200=6;
    int keys_f_KeySchedule_200[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_200[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_194_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_200[6][i]);
      };
    }
    output:
      SP_f_194_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_371
  {
    state:
    {
    int table_Sbox_371[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_371[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor Xor_384
  {
    state:
    {
    int n_Xor_384=2;
    }
    input:
      SP_f_383_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_385_split: y1;
  }

  actor Sbox_176
  {
    state:
    {
    int table_Sbox_176[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_176[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor Sbox_40
  {
    state:
    {
    int table_Sbox_40[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_40[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor Sbox_368
  {
    state:
    {
    int table_Sbox_368[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_368[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor Sbox_451
  {
    state:
    {
    int table_Sbox_451[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_451[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Sbox_391
  {
    state:
    {
    int table_Sbox_391[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_391[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_317
  {
    state:
    {
    int table_Sbox_317[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_317[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor Sbox_396
  {
    state:
    {
    int table_Sbox_396[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_396[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_339
  {
    state:
    {
    int table_Sbox_339[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_339[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor Sbox_338
  {
    state:
    {
    int table_Sbox_338[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_338[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_308
  {
    state:
    {
    int vector_f_KeySchedule_308=7;
    int round_f_KeySchedule_308=10;
    int keys_f_KeySchedule_308[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_308[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_302_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_308[10][i]);
      };
    }
    output:
      SP_f_302_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_445
  {
    state:
    {
    int table_Sbox_445[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_445[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Sbox_448
  {
    state:
    {
    int table_Sbox_448[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_448[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Sbox_234
  {
    state:
    {
    int table_Sbox_234[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_234[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_166
  {
    state:
    {
    }
    input:
      SP_nextR_163_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_163_join: y1;
  }

  actor Xor_326
  {
    state:
    {
    int n_Xor_326=2;
    }
    input:
      SP_nextR_325_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_19_join: y1;
  }

  actor doE_225
  {
    state:
    {
    }
    input:
      SP_f_221_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_221_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_149
  {
    state:
    {
    int table_Sbox_149[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_149[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor Sbox_342
  {
    state:
    {
    int table_Sbox_342[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_342[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor Sbox_45
  {
    state:
    {
    int table_Sbox_45[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_45[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor Xor_164
  {
    state:
    {
    int n_Xor_164=2;
    }
    input:
      SP_nextR_163_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_13_join: y1;
  }

  actor AnonFilter_a0_375
  {
    state:
    {
    }
    input:
      SP_DEScoder_20_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_20_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor streamit_library_Identity_193
  {
    state:
    {
    }
    input:
      SP_nextR_190_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_190_join: y1;
  }

  actor Sbox_257
  {
    state:
    {
    int table_Sbox_257[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_257[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_38
  {
    state:
    {
    int vector_f_KeySchedule_38=7;
    int round_f_KeySchedule_38=0;
    int keys_f_KeySchedule_38[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_38[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_32_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_38[0][i]);
      };
    }
    output:
      SP_f_32_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_209
  {
    state:
    {
    int table_Sbox_209[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_209[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor Sbox_285
  {
    state:
    {
    int table_Sbox_285[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_285[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor Sbox_155
  {
    state:
    {
    int table_Sbox_155[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_155[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor Sbox_263
  {
    state:
    {
    int table_Sbox_263[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_263[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor Sbox_128
  {
    state:
    {
    int table_Sbox_128[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_128[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor Sbox_259
  {
    state:
    {
    int table_Sbox_259[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_259[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor Sbox_418
  {
    state:
    {
    int table_Sbox_418[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_418[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor doP_413
  {
    state:
    {
    }
    input:
      Sboxes_412_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_406_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_47
  {
    state:
    {
    int table_Sbox_47[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_47[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor doP_170
  {
    state:
    {
    }
    input:
      Sboxes_169_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_163_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor doP_332
  {
    state:
    {
    }
    input:
      Sboxes_331_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_325_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor AnonFilter_a0_132
  {
    state:
    {
    }
    input:
      SP_DEScoder_11_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_11_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor doE_117
  {
    state:
    {
    }
    input:
      SP_f_113_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_113_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor AnonFilter_a0_267
  {
    state:
    {
    }
    input:
      SP_DEScoder_16_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_16_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor f_KeySchedule_146
  {
    state:
    {
    int vector_f_KeySchedule_146=7;
    int round_f_KeySchedule_146=4;
    int keys_f_KeySchedule_146[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_146[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_140_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_146[4][i]);
      };
    }
    output:
      SP_f_140_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor AnonFilter_a0_348
  {
    state:
    {
    }
    input:
      SP_DEScoder_19_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_19_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_178
  {
    state:
    {
    int table_Sbox_178[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_178[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_112
  {
    state:
    {
    }
    input:
      SP_nextR_109_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_109_join: y1;
  }

  actor Sbox_369
  {
    state:
    {
    int table_Sbox_369[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_369[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor doE_90
  {
    state:
    {
    }
    input:
      SP_f_86_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_86_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_423
  {
    state:
    {
    int table_Sbox_423[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_423[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor Sbox_73
  {
    state:
    {
    int table_Sbox_73[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_73[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor doIPm1_25
  {
    state:
    {
    }
    input:
      CrissCross_24: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      {
      int i;
      for (i=0; (i < 64); i++) {
        push(peek((IPm1[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 64); i++) {
        pop();
      }
      };
    }
    output:
      BitstoInts_461: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48,y49,y50,y51,y52,y53,y54,y55,y56,y57,y58,y59,y60,y61,y62,y63,y64;
  }

  actor doP_224
  {
    state:
    {
    }
    input:
      Sboxes_223_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_217_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor f_KeySchedule_362
  {
    state:
    {
    int vector_f_KeySchedule_362=7;
    int round_f_KeySchedule_362=12;
    int keys_f_KeySchedule_362[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_362[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_356_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_362[12][i]);
      };
    }
    output:
      SP_f_356_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_153
  {
    state:
    {
    int table_Sbox_153[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_153[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor Sbox_42
  {
    state:
    {
    int table_Sbox_42[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_42[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor Sbox_447
  {
    state:
    {
    int table_Sbox_447[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_447[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Sbox_421
  {
    state:
    {
    int table_Sbox_421[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_421[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_389
  {
    state:
    {
    int vector_f_KeySchedule_389=7;
    int round_f_KeySchedule_389=13;
    int keys_f_KeySchedule_389[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_389[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_383_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_389[13][i]);
      };
    }
    output:
      SP_f_383_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Xor_222
  {
    state:
    {
    int n_Xor_222=2;
    }
    input:
      SP_f_221_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_223_split: y1;
  }

  actor Sbox_452
  {
    state:
    {
    int table_Sbox_452[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_439_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_452[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_439_join: y1,y2,y3,y4;
  }

  actor Sbox_256
  {
    state:
    {
    int table_Sbox_256[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_256[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor Xor_353
  {
    state:
    {
    int n_Xor_353=2;
    }
    input:
      SP_nextR_352_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_20_join: y1;
  }

  actor Sbox_124
  {
    state:
    {
    int table_Sbox_124[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_124[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor Xor_56
  {
    state:
    {
    int n_Xor_56=2;
    }
    input:
      SP_nextR_55_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_9_join: y1;
  }

  actor Sbox_340
  {
    state:
    {
    int table_Sbox_340[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_340[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor doE_63
  {
    state:
    {
    }
    input:
      SP_f_59_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_59_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_208
  {
    state:
    {
    int table_Sbox_208[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_208[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor Sbox_206
  {
    state:
    {
    int table_Sbox_206[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_206[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_294
  {
    state:
    {
    }
    input:
      SP_DEScoder_17_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_17_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor f_KeySchedule_416
  {
    state:
    {
    int vector_f_KeySchedule_416=7;
    int round_f_KeySchedule_416=14;
    int keys_f_KeySchedule_416[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_416[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_410_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_416[14][i]);
      };
    }
    output:
      SP_f_410_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_288
  {
    state:
    {
    int table_Sbox_288[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_288[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor Sbox_286
  {
    state:
    {
    int table_Sbox_286[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_286[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_409
  {
    state:
    {
    }
    input:
      SP_nextR_406_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_406_join: y1;
  }

  actor Sbox_94
  {
    state:
    {
    int table_Sbox_94[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_94[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor F_HexPrinter_462
  {
    state:
    {
    int descriptor_F_HexPrinter_462=2;
    int n_F_HexPrinter_462=64;
    int bytes_F_HexPrinter_462=16;
    }
    input:
      BitstoInts_461: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      sum += peek(0);
      sum += peek(1);
      sum += peek(2);
      sum += peek(3);
      sum += peek(4);
      sum += peek(5);
      sum += peek(6);
      sum += peek(7);
      sum += peek(8);
      sum += peek(9);
      sum += peek(10);
      sum += peek(11);
      sum += peek(12);
      sum += peek(13);
      sum += peek(14);
      sum += peek(15);
      if (PRINTINFO) {
        if ((2 == 0)) {
        } else {
          if ((2 == 1)) {
          } else {
            if ((2 == 2)) {
            }
          }
        }
      }
      {
      int i;
      for (i=(16 - 1); (i >= 0); i--) {
        int v = peek(i);
        if ((v < 10)) {
        } else {
          if ((v == 10)) {
          } else {
            if ((v == 11)) {
            } else {
              if ((v == 12)) {
              } else {
                if ((v == 13)) {
                } else {
                  if ((v == 14)) {
                  } else {
                    if ((v == 15)) {
                    } else {
                    }
                  }
                }
              }
            }
          }
        }
      }
      };
      {
      int i;
      for (i=0; (i < 16); i++) {
        pop();
      }
      };
    }
  }

  actor Sbox_312
  {
    state:
    {
    int table_Sbox_312[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_312[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_227
  {
    state:
    {
    int vector_f_KeySchedule_227=7;
    int round_f_KeySchedule_227=7;
    int keys_f_KeySchedule_227[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_227[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_221_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_227[7][i]);
      };
    }
    output:
      SP_f_221_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_204
  {
    state:
    {
    int table_Sbox_204[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_204[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor CrissCross_24
  {
    state:
    {
    }
    input:
      SP_DEScoder_23_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      {
      int i;
      for (i=0; (i < 32); i++) {
        push(peek((32 + i)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        push(pop());
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      doIPm1_25: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48,y49,y50,y51,y52,y53,y54,y55,y56,y57,y58,y59,y60,y61,y62,y63,y64;
  }

  actor AnonFilter_a0_159
  {
    state:
    {
    }
    input:
      SP_DEScoder_12_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_12_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Xor_60
  {
    state:
    {
    int n_Xor_60=2;
    }
    input:
      SP_f_59_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_61_split: y1;
  }

  actor Sbox_315
  {
    state:
    {
    int table_Sbox_315[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_315[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor Sbox_337
  {
    state:
    {
    int table_Sbox_337[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_337[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor f_KeySchedule_443
  {
    state:
    {
    int vector_f_KeySchedule_443=7;
    int round_f_KeySchedule_443=15;
    int keys_f_KeySchedule_443[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_443[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_437_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_443[15][i]);
      };
    }
    output:
      SP_f_437_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_260
  {
    state:
    {
    int table_Sbox_260[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_260[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor Xor_191
  {
    state:
    {
    int n_Xor_191=2;
    }
    input:
      SP_nextR_190_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_14_join: y1;
  }

  actor Xor_83
  {
    state:
    {
    int n_Xor_83=2;
    }
    input:
      SP_nextR_82_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_10_join: y1;
  }

  actor Sbox_67
  {
    state:
    {
    int table_Sbox_67[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_67[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor doP_278
  {
    state:
    {
    }
    input:
      Sboxes_277_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_271_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Xor_407
  {
    state:
    {
    int n_Xor_407=2;
    }
    input:
      SP_nextR_406_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_22_join: y1;
  }

  actor Sbox_154
  {
    state:
    {
    int table_Sbox_154[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_154[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor doE_306
  {
    state:
    {
    }
    input:
      SP_f_302_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_302_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Xor_137
  {
    state:
    {
    int n_Xor_137=2;
    }
    input:
      SP_nextR_136_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_12_join: y1;
  }

  actor Sbox_419
  {
    state:
    {
    int table_Sbox_419[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_419[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor doP_305
  {
    state:
    {
    }
    input:
      Sboxes_304_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_298_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor doP_143
  {
    state:
    {
    }
    input:
      Sboxes_142_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_136_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_425
  {
    state:
    {
    int table_Sbox_425[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_425[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor Sbox_235
  {
    state:
    {
    int table_Sbox_235[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_235[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor Sbox_121
  {
    state:
    {
    int table_Sbox_121[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_121[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor Xor_438
  {
    state:
    {
    int n_Xor_438=2;
    }
    input:
      SP_f_437_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_439_split: y1;
  }

  actor Sbox_395
  {
    state:
    {
    int table_Sbox_395[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_395[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_123
  {
    state:
    {
    int table_Sbox_123[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_123[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor doP_89
  {
    state:
    {
    }
    input:
      Sboxes_88_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_82_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_202
  {
    state:
    {
    int table_Sbox_202[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_202[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor Sbox_283
  {
    state:
    {
    int table_Sbox_283[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_283[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor doP_251
  {
    state:
    {
    }
    input:
      Sboxes_250_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_244_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Xor_330
  {
    state:
    {
    int n_Xor_330=2;
    }
    input:
      SP_f_329_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_331_split: y1;
  }

  actor f_KeySchedule_335
  {
    state:
    {
    int vector_f_KeySchedule_335=7;
    int round_f_KeySchedule_335=11;
    int keys_f_KeySchedule_335[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_335[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_329_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_335[11][i]);
      };
    }
    output:
      SP_f_329_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_370
  {
    state:
    {
    int table_Sbox_370[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_370[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor Sbox_287
  {
    state:
    {
    int table_Sbox_287[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_287[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor Sbox_97
  {
    state:
    {
    int table_Sbox_97[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_97[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_78
  {
    state:
    {
    }
    input:
      SP_DEScoder_9_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_9_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Xor_245
  {
    state:
    {
    int n_Xor_245=2;
    }
    input:
      SP_nextR_244_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_16_join: y1;
  }

  actor Xor_33
  {
    state:
    {
    int n_Xor_33=2;
    }
    input:
      SP_f_32_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_34_split: y1;
  }

  actor streamit_library_Identity_247
  {
    state:
    {
    }
    input:
      SP_nextR_244_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_244_join: y1;
  }

  actor Xor_141
  {
    state:
    {
    int n_Xor_141=2;
    }
    input:
      SP_f_140_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_142_split: y1;
  }

  actor doE_171
  {
    state:
    {
    }
    input:
      SP_f_167_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_167_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_233
  {
    state:
    {
    int table_Sbox_233[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_233[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_85
  {
    state:
    {
    }
    input:
      SP_nextR_82_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_82_join: y1;
  }

  actor Xor_29
  {
    state:
    {
    int n_Xor_29=2;
    }
    input:
      SP_nextR_28_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_8_join: y1;
  }

  actor AnonFilter_a0_105
  {
    state:
    {
    }
    input:
      SP_DEScoder_10_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_10_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor streamit_library_Identity_301
  {
    state:
    {
    }
    input:
      SP_nextR_298_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_298_join: y1;
  }

  actor Sbox_175
  {
    state:
    {
    int table_Sbox_175[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_175[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor F_PlainTextSource_4
  {
    state:
    {
    int vector_F_PlainTextSource_4=7;
    int TEXT_F_PlainTextSource_4[34][2]  = {{0,0},
{-1,-1},
{268435456,1},
{286331153,286331153},
{286331153,286331153},
{19088743,-1985229329},
{0,0},
{19088743,-1985229329},
{27383504,964126530},
{1557482664,1039095770},
{38327352,116814194},
{1363495768,769606666},
{1123894320,1498906530},
{94068232,1372525626},
{123132128,2001166802},
{1982141624,700401770},
{1004343696,1228351490},
{647323496,900685978},
{374169152,1327977010},
{1795517976,1973378250},
{4970223,152526946},
{1208826112,1860657906},
{1131757768,1770994938},
{120406944,1996968594},
{50222455,-2129137366},
{496852048,418851010},
{810889768,1836001626},
{19088743,-1985229329},
{19088743,-1985229329},
{19088743,-1985229329},
{-1,-1},
{0,0},
{0,0},
{-1,-1}
};
    }
    init:
    {
      printf("Enter seed: ");
      scanf("%d", &seed);
      srand(seed);
    }
    firing:
    {
      push(rand_r(&seed));
      push(rand_r(&seed));
    }
    output:
      IntoBits_5: y1,y2;
  }

  actor Sbox_341
  {
    state:
    {
    int table_Sbox_341[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_341[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor doE_387
  {
    state:
    {
    }
    input:
      SP_f_383_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_383_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor doE_441
  {
    state:
    {
    }
    input:
      SP_f_437_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_437_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor BitstoInts_461
  {
    state:
    {
    int n_BitstoInts_461=4;
    }
    input:
      doIPm1_25: x1,x2,x3,x4;
    firing:
    {
      int v = 0;
      {
      int i;
      for (i=0; (i < 4); i++) {
        v = (v | (pop() << i));
      }
      };
      push(v);
    }
    output:
      F_HexPrinter_462: y1;
  }

  actor f_KeySchedule_281
  {
    state:
    {
    int vector_f_KeySchedule_281=7;
    int round_f_KeySchedule_281=9;
    int keys_f_KeySchedule_281[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_281[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_275_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_281[9][i]);
      };
    }
    output:
      SP_f_275_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Xor_195
  {
    state:
    {
    int n_Xor_195=2;
    }
    input:
      SP_f_194_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_196_split: y1;
  }

  actor Sbox_420
  {
    state:
    {
    int table_Sbox_420[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_420[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_58
  {
    state:
    {
    }
    input:
      SP_nextR_55_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_55_join: y1;
  }

  actor doP_197
  {
    state:
    {
    }
    input:
      Sboxes_196_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_190_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_180
  {
    state:
    {
    int table_Sbox_180[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_180[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor Sbox_284
  {
    state:
    {
    int table_Sbox_284[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_277_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_284[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_277_join: y1,y2,y3,y4;
  }

  actor doE_198
  {
    state:
    {
    }
    input:
      SP_f_194_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_194_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Xor_299
  {
    state:
    {
    int n_Xor_299=2;
    }
    input:
      SP_nextR_298_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_18_join: y1;
  }

  actor Sbox_394
  {
    state:
    {
    int table_Sbox_394[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_394[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_125
  {
    state:
    {
    int table_Sbox_125[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_125[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor Sbox_41
  {
    state:
    {
    int table_Sbox_41[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_41[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_436
  {
    state:
    {
    }
    input:
      SP_nextR_433_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_433_join: y1;
  }

  actor AnonFilter_a0_429
  {
    state:
    {
    }
    input:
      SP_DEScoder_22_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_22_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_367
  {
    state:
    {
    int table_Sbox_367[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_367[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_274
  {
    state:
    {
    }
    input:
      SP_nextR_271_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_271_join: y1;
  }

  actor Sbox_397
  {
    state:
    {
    int table_Sbox_397[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_397[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_44
  {
    state:
    {
    int table_Sbox_44[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_44[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor Sbox_232
  {
    state:
    {
    int table_Sbox_232[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_232[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor Xor_357
  {
    state:
    {
    int n_Xor_357=2;
    }
    input:
      SP_f_356_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_358_split: y1;
  }

  actor Sbox_343
  {
    state:
    {
    int table_Sbox_343[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_331_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_343[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_331_join: y1,y2,y3,y4;
  }

  actor Sbox_181
  {
    state:
    {
    int table_Sbox_181[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_169_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_181[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_169_join: y1,y2,y3,y4;
  }

  actor Sbox_313
  {
    state:
    {
    int table_Sbox_313[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_304_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_313[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_304_join: y1,y2,y3,y4;
  }

  actor streamit_library_Identity_31
  {
    state:
    {
    }
    input:
      SP_nextR_28_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_28_join: y1;
  }

  actor Sbox_72
  {
    state:
    {
    int table_Sbox_72[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_72[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor Sbox_46
  {
    state:
    {
    int table_Sbox_46[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_46[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor Xor_168
  {
    state:
    {
    int n_Xor_168=2;
    }
    input:
      SP_f_167_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_169_split: y1;
  }

  actor streamit_library_Identity_355
  {
    state:
    {
    }
    input:
      SP_nextR_352_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_352_join: y1;
  }

  actor Sbox_398
  {
    state:
    {
    int table_Sbox_398[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_385_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_398[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_385_join: y1,y2,y3,y4;
  }

  actor Sbox_366
  {
    state:
    {
    int table_Sbox_366[4][16] ={{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_366[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor Sbox_424
  {
    state:
    {
    int table_Sbox_424[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_412_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_424[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_412_join: y1,y2,y3,y4;
  }

  actor Sbox_365
  {
    state:
    {
    int table_Sbox_365[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_358_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_365[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_358_join: y1,y2,y3,y4;
  }

  actor Sbox_236
  {
    state:
    {
    int table_Sbox_236[4][16] ={{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_236[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor Sbox_152
  {
    state:
    {
    int table_Sbox_152[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_142_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_152[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_142_join: y1,y2,y3,y4;
  }

  actor Sbox_127
  {
    state:
    {
    int table_Sbox_127[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_127[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

  actor doE_252
  {
    state:
    {
    }
    input:
      SP_f_248_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=0; (i < 48); i++) {
        push(peek((E[i] - 1)));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_f_248_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor streamit_library_Identity_220
  {
    state:
    {
    }
    input:
      SP_nextR_217_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_217_join: y1;
  }

  actor f_KeySchedule_254
  {
    state:
    {
    int vector_f_KeySchedule_254=7;
    int round_f_KeySchedule_254=8;
    int keys_f_KeySchedule_254[16][48]  = {0};
    }
    init:
    {
      int k64[64]  = {0};
      {
      int w;
      for (w=1; (w >= 0); w--) {
        int v = USERKEYS[7][w];
        int m = 1;
        {
        int i;
        for (i=0; (i < 32); i++) {
          if ((((v & m) >> i) != 0)) {
            k64[(((1 - w) * 32) + i)] = 1;
          } else {
            k64[(((1 - w) * 32) + i)] = 0;
          }
          m = (m << 1);
        }
        };
      }
      };
      int k56[56]  = {0};
      {
      int i;
      for (i=0; (i < 56); i++) {
        k56[i] = k64[(64 - PC1[i])];
      }
      };
      {
      int r;
      for (r=0; (r < 16); r++) {
        int bits[56]  = {0};
        {
        int i;
        for (i=0; (i < 28); i++) {
          bits[i] = k56[((i + RT[r]) % 28)];
        }
        };
        {
        int i;
        for (i=28; (i < 56); i++) {
          bits[i] = k56[(28 + ((i + RT[r]) % 28))];
        }
        };
        {
        int i;
        for (i=0; (i < 56); i++) {
          k56[i] = bits[i];
        }
        };
        {
        int i;
        for (i=47; (i >= 0); i--) {
          keys_f_KeySchedule_254[r][(47 - i)] = k56[(PC2[i] - 1)];
        }
        };
      }
      };
    }
    input:
      SP_f_248_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        pop();
      };
      for (i = 0; (i < 48); i++) {
        push(keys_f_KeySchedule_254[8][i]);
      };
    }
    output:
      SP_f_248_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32,y33,y34,y35,y36,y37,y38,y39,y40,y41,y42,y43,y44,y45,y46,y47,y48;
  }

  actor Sbox_71
  {
    state:
    {
    int table_Sbox_71[4][16] ={{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
    }
    input:
      Sboxes_61_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_71[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_61_join: y1,y2,y3,y4;
  }

  actor AnonFilter_a0_213
  {
    state:
    {
    }
    input:
      SP_DEScoder_14_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_14_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_262
  {
    state:
    {
    int table_Sbox_262[4][16] ={{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_262[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor doP_386
  {
    state:
    {
    }
    input:
      Sboxes_385_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_379_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_43
  {
    state:
    {
    int table_Sbox_43[4][16] ={{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
    }
    input:
      Sboxes_34_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_43[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_34_join: y1,y2,y3,y4;
  }

  actor Sbox_95
  {
    state:
    {
    int table_Sbox_95[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_88_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_95[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_88_join: y1,y2,y3,y4;
  }

  actor Xor_276
  {
    state:
    {
    int n_Xor_276=2;
    }
    input:
      SP_f_275_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_277_split: y1;
  }

  actor AnonFilter_a0_321
  {
    state:
    {
    }
    input:
      SP_DEScoder_18_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i++) {
        push(pop());
      };
      for (i = 0; (i < 32); i++) {
        pop();
      };
    }
    output:
      SP_DEScoder_18_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor doP_62
  {
    state:
    {
    }
    input:
      Sboxes_61_join: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      {
      int i;
      for (i=31; (i >= 0); i--) {
        push(peek((32 - P[i])));
      }
      };
      {
      int i;
      for (i=0; (i < 32); i++) {
        pop();
      }
      };
    }
    output:
      SP_nextR_55_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor Sbox_207
  {
    state:
    {
    int table_Sbox_207[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_207[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor Sbox_229
  {
    state:
    {
    int table_Sbox_229[4][16] ={{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
    }
    input:
      Sboxes_223_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_229[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_223_join: y1,y2,y3,y4;
  }

  actor Sbox_261
  {
    state:
    {
    int table_Sbox_261[4][16] ={{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
    }
    input:
      Sboxes_250_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_261[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_250_join: y1,y2,y3,y4;
  }

  actor Xor_87
  {
    state:
    {
    int n_Xor_87=2;
    }
    input:
      SP_f_86_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      Sboxes_88_split: y1;
  }

  actor Xor_272
  {
    state:
    {
    int n_Xor_272=2;
    }
    input:
      SP_nextR_271_join: x1,x2;
    firing:
    {
      int _bit_x = pop();
      {
      int i;
      for (i=1; (i < 2); i++) {
        int _bit_y = pop();
        _bit_x = (_bit_x ^ _bit_y);
      }
      };
      push(_bit_x);
    }
    output:
      SP_DEScoder_17_join: y1;
  }

  actor streamit_library_Identity_139
  {
    state:
    {
    }
    input:
      SP_nextR_136_split: x1;
    firing:
    {
      push(pop());
    }
    output:
      SP_nextR_136_join: y1;
  }

  actor Sbox_203
  {
    state:
    {
    int table_Sbox_203[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_196_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_203[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_196_join: y1,y2,y3,y4;
  }

  actor Sbox_122
  {
    state:
    {
    int table_Sbox_122[4][16] ={{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
    }
    input:
      Sboxes_115_split: x1,x2,x3,x4,x5,x6;
    firing:
    {
      int r = pop();
      int c = pop();
      c = ((pop() << 1) | c);
      c = ((pop() << 2) | c);
      c = ((pop() << 3) | c);
      r = ((pop() << 1) | r);
      int out = table_Sbox_122[r][c];
      push(((int)(((out & 1) >> 0))));
      push(((int)(((out & 2) >> 1))));
      push(((int)(((out & 4) >> 2))));
      push(((int)(((out & 8) >> 3))));
    }
    output:
      Sboxes_115_join: y1,y2,y3,y4;
  }

}

postamble {
int main(){
  DES();
  printf("sum: %lld\n", sum);
  return 0;
}
}
