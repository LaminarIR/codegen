preamble {
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

volatile long long sum = 0;
}

sdf RadixSort {
  int IntSource_1 -> Sort_4;
  int Sort_4 -> Sort_5;
  int Sort_5 -> Sort_6;
  int Sort_6 -> Sort_7;
  int Sort_7 -> Sort_8;
  int Sort_8 -> Sort_9;
  int Sort_9 -> Sort_10;
  int Sort_10 -> Sort_11;
  int Sort_11 -> Sort_12;
  int Sort_12 -> Sort_13;
  int Sort_13 -> Sort_14;
  int Sort_14 -> IntPrinter_3;

  actor IntSource_1
  {
    state:
    {
    int SIZE_IntSource_1=16;
    int data_IntSource_1[16]  = {0};
    int index_IntSource_1 = 0;
    }
    init:
    {
      data_IntSource_1[0] = 503;
      data_IntSource_1[1] = 87;
      data_IntSource_1[2] = 512;
      data_IntSource_1[3] = 61;
      data_IntSource_1[4] = 908;
      data_IntSource_1[5] = 170;
      data_IntSource_1[6] = 897;
      data_IntSource_1[7] = 275;
      data_IntSource_1[8] = 653;
      data_IntSource_1[9] = 426;
      data_IntSource_1[10] = 154;
      data_IntSource_1[11] = 509;
      data_IntSource_1[12] = 612;
      data_IntSource_1[13] = 677;
      data_IntSource_1[14] = 765;
      data_IntSource_1[15] = 703;
    }
    firing:
    {
      push(data_IntSource_1[index_IntSource_1++]);
      if ((index_IntSource_1 == 16)) {
        index_IntSource_1 = 0;
      }
    }
    output:
      Sort_4: y1;
  }

  actor Sort_8
  {
    state:
    {
    int SIZE_Sort_8=16;
    int radix_Sort_8=16;
    }
    input:
      Sort_7: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 16) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_9: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_6
  {
    state:
    {
    int SIZE_Sort_6=16;
    int radix_Sort_6=4;
    }
    input:
      Sort_5: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 4) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_7: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_5
  {
    state:
    {
    int SIZE_Sort_5=16;
    int radix_Sort_5=2;
    }
    input:
      Sort_4: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 2) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_6: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_13
  {
    state:
    {
    int SIZE_Sort_13=16;
    int radix_Sort_13=512;
    }
    input:
      Sort_12: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 512) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_14: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_9
  {
    state:
    {
    int SIZE_Sort_9=16;
    int radix_Sort_9=32;
    }
    input:
      Sort_8: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 32) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_10: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor IntPrinter_3
  {
    state:
    {
    int x_IntPrinter_3 = 0;
    }
    input:
      Sort_14: x1;
    firing:
    {
      sum += peek(0);
      x_IntPrinter_3 = pop();
    }
  }

  actor Sort_11
  {
    state:
    {
    int SIZE_Sort_11=16;
    int radix_Sort_11=128;
    }
    input:
      Sort_10: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 128) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_12: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_10
  {
    state:
    {
    int SIZE_Sort_10=16;
    int radix_Sort_10=64;
    }
    input:
      Sort_9: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 64) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_11: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_4
  {
    state:
    {
    int SIZE_Sort_4=16;
    int radix_Sort_4=1;
    }
    input:
      IntSource_1: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 1) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_5: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_14
  {
    state:
    {
    int SIZE_Sort_14=16;
    int radix_Sort_14=1024;
    }
    input:
      Sort_13: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 1024) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      IntPrinter_3: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_12
  {
    state:
    {
    int SIZE_Sort_12=16;
    int radix_Sort_12=256;
    }
    input:
      Sort_11: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 256) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_13: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor Sort_7
  {
    state:
    {
    int SIZE_Sort_7=16;
    int radix_Sort_7=8;
    }
    input:
      Sort_6: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int ordering[16]  = {0};
      int j = 0;
      {
      int i;
      for (i=0; (i < 16); i++) {
        int current = pop();
        if (((current & 8) == 0)) {
          push(current);
        } else {
          ordering[j] = current;
          j = (j + 1);
        }
      }
      };
      {
      int i;
      for (i=0; (i < j); i++) {
        push(ordering[i]);
      }
      };
    }
    output:
      Sort_8: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

}

postamble {
int main(){
  RadixSort();
  printf("sum: %lld\n", sum);
  return 0;
}
}
