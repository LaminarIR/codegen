preamble {
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

static unsigned int seed;

    float mag(float real, float imag) {

      return ((float)(sqrt(((real * real) + (imag * imag)))));
    }
volatile double sum = 0.0;
}

sdf BeamFormer {
  int IntSource_1 -> AnonFilter_a1_4_split(12);
  int AnonFilter_a1_4_split(1) -> InputGenerate_18;
  float InputGenerate_18 -> BeamFirFilter_19;
  float BeamFirFilter_19 -> BeamFirFilter_20;
  float BeamFirFilter_20 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_23;
  float InputGenerate_23 -> BeamFirFilter_24;
  float BeamFirFilter_24 -> BeamFirFilter_25;
  float BeamFirFilter_25 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_28;
  float InputGenerate_28 -> BeamFirFilter_29;
  float BeamFirFilter_29 -> BeamFirFilter_30;
  float BeamFirFilter_30 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_33;
  float InputGenerate_33 -> BeamFirFilter_34;
  float BeamFirFilter_34 -> BeamFirFilter_35;
  float BeamFirFilter_35 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_38;
  float InputGenerate_38 -> BeamFirFilter_39;
  float BeamFirFilter_39 -> BeamFirFilter_40;
  float BeamFirFilter_40 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_43;
  float InputGenerate_43 -> BeamFirFilter_44;
  float BeamFirFilter_44 -> BeamFirFilter_45;
  float BeamFirFilter_45 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_48;
  float InputGenerate_48 -> BeamFirFilter_49;
  float BeamFirFilter_49 -> BeamFirFilter_50;
  float BeamFirFilter_50 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_53;
  float InputGenerate_53 -> BeamFirFilter_54;
  float BeamFirFilter_54 -> BeamFirFilter_55;
  float BeamFirFilter_55 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_58;
  float InputGenerate_58 -> BeamFirFilter_59;
  float BeamFirFilter_59 -> BeamFirFilter_60;
  float BeamFirFilter_60 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_63;
  float InputGenerate_63 -> BeamFirFilter_64;
  float BeamFirFilter_64 -> BeamFirFilter_65;
  float BeamFirFilter_65 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_68;
  float InputGenerate_68 -> BeamFirFilter_69;
  float BeamFirFilter_69 -> BeamFirFilter_70;
  float BeamFirFilter_70 -> AnonFilter_a1_4_join(2);
  int AnonFilter_a1_4_split(1) -> InputGenerate_73;
  float InputGenerate_73 -> BeamFirFilter_74;
  float BeamFirFilter_74 -> BeamFirFilter_75;
  float BeamFirFilter_75 -> AnonFilter_a1_4_join(2);
  float AnonFilter_a1_4_join(24) -> AnonFilter_a3_5_split(1);
  float AnonFilter_a3_5_split(1) -> BeamForm_82;
  float BeamForm_82 -> BeamFirFilter_83;
  float BeamFirFilter_83 -> Magnitude_84;
  float Magnitude_84 -> Detector_85;
  float Detector_85 -> AnonFilter_a3_5_join(1);
  float AnonFilter_a3_5_split(1) -> BeamForm_89;
  float BeamForm_89 -> BeamFirFilter_90;
  float BeamFirFilter_90 -> Magnitude_91;
  float Magnitude_91 -> Detector_92;
  float Detector_92 -> AnonFilter_a3_5_join(1);
  float AnonFilter_a3_5_split(1) -> BeamForm_96;
  float BeamForm_96 -> BeamFirFilter_97;
  float BeamFirFilter_97 -> Magnitude_98;
  float Magnitude_98 -> Detector_99;
  float Detector_99 -> AnonFilter_a3_5_join(1);
  float AnonFilter_a3_5_split(1) -> BeamForm_103;
  float BeamForm_103 -> BeamFirFilter_104;
  float BeamFirFilter_104 -> Magnitude_105;
  float Magnitude_105 -> Detector_106;
  float Detector_106 -> AnonFilter_a3_5_join(1);
  float AnonFilter_a3_5_join(4) -> FloatPrinter_3;

  actor InputGenerate_18
  {
    state:
    {
    int myChannel_InputGenerate_18=0;
    int numberOfSamples_InputGenerate_18=1024;
    int tarBeam_InputGenerate_18=1;
    int targetSample_InputGenerate_18=256;
    float thresh_InputGenerate_18=242.24998;
    int curSample_InputGenerate_18 = 0;
    int holdsTarget_InputGenerate_18 = 0;
    }
    init:
    {
      curSample_InputGenerate_18 = 0;
      holdsTarget_InputGenerate_18 = (1 == 0);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_18 && (curSample_InputGenerate_18 == 256))) {
        push(sqrt((curSample_InputGenerate_18 * 0)));
        push((sqrt((curSample_InputGenerate_18 * 0)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_18 * 0)));
        push(-(sqrt((curSample_InputGenerate_18 * 0)) + 1));
      }
      curSample_InputGenerate_18++;
      if ((curSample_InputGenerate_18 >= 1024)) {
        curSample_InputGenerate_18 = 0;
      }
    }
    output:
      BeamFirFilter_19: y1,y2;
  }

  actor IntSource_1
  {
    state:
    {
    int x_IntSource_1 = 0;
    }
    init:
    {
      printf("Enter seed: ");
      scanf("%d", &seed);
      srand(seed);
    }
    firing:
    {
      push(rand_r(&seed));
    }
    output:
      AnonFilter_a1_4_split: y1;
  }

  actor Magnitude_91
  {
    init:
    {
    }
    input:
      BeamFirFilter_90: x1,x2;
    firing:
    {
      float f1 = pop();
      float f2 = pop();
      push(mag(f1, f2));
    }
    output:
      Detector_92: y1;
  }

  actor InputGenerate_53
  {
    state:
    {
    int myChannel_InputGenerate_53=7;
    int numberOfSamples_InputGenerate_53=1024;
    int tarBeam_InputGenerate_53=1;
    int targetSample_InputGenerate_53=256;
    float thresh_InputGenerate_53=242.24998;
    int curSample_InputGenerate_53 = 0;
    int holdsTarget_InputGenerate_53 = 0;
    }
    init:
    {
      curSample_InputGenerate_53 = 0;
      holdsTarget_InputGenerate_53 = (1 == 7);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_53 && (curSample_InputGenerate_53 == 256))) {
        push(sqrt((curSample_InputGenerate_53 * 7)));
        push((sqrt((curSample_InputGenerate_53 * 7)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_53 * 7)));
        push(-(sqrt((curSample_InputGenerate_53 * 7)) + 1));
      }
      curSample_InputGenerate_53++;
      if ((curSample_InputGenerate_53 >= 1024)) {
        curSample_InputGenerate_53 = 0;
      }
    }
    output:
      BeamFirFilter_54: y1,y2;
  }

  actor BeamFirFilter_70
  {
    state:
    {
    int numTaps_BeamFirFilter_70=64;
    int inputLength_BeamFirFilter_70=512;
    int decimationRatio_BeamFirFilter_70=3;
    float real_weight_BeamFirFilter_70[64]  = {0.0};
    float imag_weight_BeamFirFilter_70[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_70 = 0;
    float realBuffer_BeamFirFilter_70[64]  = {0.0};
    float imagBuffer_BeamFirFilter_70[64]  = {0.0};
    int count_BeamFirFilter_70 = 0;
    int pos_BeamFirFilter_70 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_70 = (64 - 1);
      pos_BeamFirFilter_70 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_70[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_70[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_69: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_70[(63 - pos_BeamFirFilter_70)] = pop();
      imagBuffer_BeamFirFilter_70[(63 - pos_BeamFirFilter_70)] = pop();
      modPos = (63 - pos_BeamFirFilter_70);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_70[modPos] * real_weight_BeamFirFilter_70[i]) + (imagBuffer_BeamFirFilter_70[modPos] * imag_weight_BeamFirFilter_70[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_70[modPos] * real_weight_BeamFirFilter_70[i]) + (realBuffer_BeamFirFilter_70[modPos] * imag_weight_BeamFirFilter_70[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_70 = ((pos_BeamFirFilter_70 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_70 += 3;
      if ((count_BeamFirFilter_70 == 512)) {
        count_BeamFirFilter_70 = 0;
        pos_BeamFirFilter_70 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_70[i] = 0;
          imagBuffer_BeamFirFilter_70[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_74
  {
    state:
    {
    int numTaps_BeamFirFilter_74=64;
    int inputLength_BeamFirFilter_74=1024;
    int decimationRatio_BeamFirFilter_74=2;
    float real_weight_BeamFirFilter_74[64]  = {0.0};
    float imag_weight_BeamFirFilter_74[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_74 = 0;
    float realBuffer_BeamFirFilter_74[64]  = {0.0};
    float imagBuffer_BeamFirFilter_74[64]  = {0.0};
    int count_BeamFirFilter_74 = 0;
    int pos_BeamFirFilter_74 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_74 = (64 - 1);
      pos_BeamFirFilter_74 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_74[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_74[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_73: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_74[(63 - pos_BeamFirFilter_74)] = pop();
      imagBuffer_BeamFirFilter_74[(63 - pos_BeamFirFilter_74)] = pop();
      modPos = (63 - pos_BeamFirFilter_74);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_74[modPos] * real_weight_BeamFirFilter_74[i]) + (imagBuffer_BeamFirFilter_74[modPos] * imag_weight_BeamFirFilter_74[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_74[modPos] * real_weight_BeamFirFilter_74[i]) + (realBuffer_BeamFirFilter_74[modPos] * imag_weight_BeamFirFilter_74[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_74 = ((pos_BeamFirFilter_74 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_74 += 2;
      if ((count_BeamFirFilter_74 == 1024)) {
        count_BeamFirFilter_74 = 0;
        pos_BeamFirFilter_74 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_74[i] = 0;
          imagBuffer_BeamFirFilter_74[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_75: y1,y2;
  }

  actor BeamForm_96
  {
    state:
    {
    int myBeamId_BeamForm_96=2;
    int numChannels_BeamForm_96=12;
    float real_weight_BeamForm_96[12]  = {0.0};
    float imag_weight_BeamForm_96[12]  = {0.0};
    }
    init:
    {
      {
      int j;
      for (j=0; (j < 12); j++) {
        int idx = (j + 1);
        real_weight_BeamForm_96[j] = (sin(idx) / ((float)((2 + idx))));
        imag_weight_BeamForm_96[j] = (cos(idx) / ((float)((2 + idx))));
      }
      };
    }
    input:
      AnonFilter_a3_5_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      {
      int i;
      for (i=0; (i < 12); i++) {
        float real_pop = pop();
        float imag_pop = pop();
        real_curr += ((real_weight_BeamForm_96[i] * real_pop) - (imag_weight_BeamForm_96[i] * imag_pop));
        imag_curr += ((real_weight_BeamForm_96[i] * imag_pop) + (imag_weight_BeamForm_96[i] * real_pop));
      }
      };
      push(real_curr);
      push(imag_curr);
    }
    output:
      BeamFirFilter_97: y1,y2;
  }

  actor BeamFirFilter_83
  {
    state:
    {
    int numTaps_BeamFirFilter_83=170;
    int inputLength_BeamFirFilter_83=170;
    int decimationRatio_BeamFirFilter_83=1;
    float real_weight_BeamFirFilter_83[170]  = {0.0};
    float imag_weight_BeamFirFilter_83[170]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_83 = 0;
    float realBuffer_BeamFirFilter_83[170]  = {0.0};
    float imagBuffer_BeamFirFilter_83[170]  = {0.0};
    int count_BeamFirFilter_83 = 0;
    int pos_BeamFirFilter_83 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_83 = (170 - 1);
      pos_BeamFirFilter_83 = 0;
      {
      int j;
      for (j=0; (j < 170); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_83[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_83[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamForm_82: x1,x2;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_83[(169 - pos_BeamFirFilter_83)] = pop();
      imagBuffer_BeamFirFilter_83[(169 - pos_BeamFirFilter_83)] = pop();
      modPos = (169 - pos_BeamFirFilter_83);
      for (i = 0; (i < 170); i++) {
        real_curr += ((realBuffer_BeamFirFilter_83[modPos] * real_weight_BeamFirFilter_83[i]) + (imagBuffer_BeamFirFilter_83[modPos] * imag_weight_BeamFirFilter_83[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_83[modPos] * real_weight_BeamFirFilter_83[i]) + (realBuffer_BeamFirFilter_83[modPos] * imag_weight_BeamFirFilter_83[i]));
        modPos = ((modPos + 1) & 169);
      };
      pos_BeamFirFilter_83 = ((pos_BeamFirFilter_83 + 1) & 169);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 1)); i++) {
        pop();
      };
      count_BeamFirFilter_83 += 1;
      if ((count_BeamFirFilter_83 == 170)) {
        count_BeamFirFilter_83 = 0;
        pos_BeamFirFilter_83 = 0;
        for (i = 0; (i < 170); i++) {
          realBuffer_BeamFirFilter_83[i] = 0;
          imagBuffer_BeamFirFilter_83[i] = 0;
        };
      }
    }
    output:
      Magnitude_84: y1,y2;
  }

  actor InputGenerate_23
  {
    state:
    {
    int myChannel_InputGenerate_23=1;
    int numberOfSamples_InputGenerate_23=1024;
    int tarBeam_InputGenerate_23=1;
    int targetSample_InputGenerate_23=256;
    float thresh_InputGenerate_23=242.24998;
    int curSample_InputGenerate_23 = 0;
    int holdsTarget_InputGenerate_23 = 0;
    }
    init:
    {
      curSample_InputGenerate_23 = 0;
      holdsTarget_InputGenerate_23 = (1 == 1);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_23 && (curSample_InputGenerate_23 == 256))) {
        push(sqrt((curSample_InputGenerate_23 * 1)));
        push((sqrt((curSample_InputGenerate_23 * 1)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_23 * 1)));
        push(-(sqrt((curSample_InputGenerate_23 * 1)) + 1));
      }
      curSample_InputGenerate_23++;
      if ((curSample_InputGenerate_23 >= 1024)) {
        curSample_InputGenerate_23 = 0;
      }
    }
    output:
      BeamFirFilter_24: y1,y2;
  }

  actor BeamFirFilter_49
  {
    state:
    {
    int numTaps_BeamFirFilter_49=64;
    int inputLength_BeamFirFilter_49=1024;
    int decimationRatio_BeamFirFilter_49=2;
    float real_weight_BeamFirFilter_49[64]  = {0.0};
    float imag_weight_BeamFirFilter_49[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_49 = 0;
    float realBuffer_BeamFirFilter_49[64]  = {0.0};
    float imagBuffer_BeamFirFilter_49[64]  = {0.0};
    int count_BeamFirFilter_49 = 0;
    int pos_BeamFirFilter_49 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_49 = (64 - 1);
      pos_BeamFirFilter_49 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_49[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_49[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_48: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_49[(63 - pos_BeamFirFilter_49)] = pop();
      imagBuffer_BeamFirFilter_49[(63 - pos_BeamFirFilter_49)] = pop();
      modPos = (63 - pos_BeamFirFilter_49);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_49[modPos] * real_weight_BeamFirFilter_49[i]) + (imagBuffer_BeamFirFilter_49[modPos] * imag_weight_BeamFirFilter_49[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_49[modPos] * real_weight_BeamFirFilter_49[i]) + (realBuffer_BeamFirFilter_49[modPos] * imag_weight_BeamFirFilter_49[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_49 = ((pos_BeamFirFilter_49 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_49 += 2;
      if ((count_BeamFirFilter_49 == 1024)) {
        count_BeamFirFilter_49 = 0;
        pos_BeamFirFilter_49 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_49[i] = 0;
          imagBuffer_BeamFirFilter_49[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_50: y1,y2;
  }

  actor InputGenerate_33
  {
    state:
    {
    int myChannel_InputGenerate_33=3;
    int numberOfSamples_InputGenerate_33=1024;
    int tarBeam_InputGenerate_33=1;
    int targetSample_InputGenerate_33=256;
    float thresh_InputGenerate_33=242.24998;
    int curSample_InputGenerate_33 = 0;
    int holdsTarget_InputGenerate_33 = 0;
    }
    init:
    {
      curSample_InputGenerate_33 = 0;
      holdsTarget_InputGenerate_33 = (1 == 3);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_33 && (curSample_InputGenerate_33 == 256))) {
        push(sqrt((curSample_InputGenerate_33 * 3)));
        push((sqrt((curSample_InputGenerate_33 * 3)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_33 * 3)));
        push(-(sqrt((curSample_InputGenerate_33 * 3)) + 1));
      }
      curSample_InputGenerate_33++;
      if ((curSample_InputGenerate_33 >= 1024)) {
        curSample_InputGenerate_33 = 0;
      }
    }
    output:
      BeamFirFilter_34: y1,y2;
  }

  actor Detector_85
  {
    state:
    {
    int _myBeam_Detector_85=0;
    int numSamples_Detector_85=170;
    int targetBeam_Detector_85=1;
    int targetSample_Detector_85=42;
    float cfarThreshold_Detector_85=242.24998;
    int curSample_Detector_85 = 0;
    int myBeam_Detector_85 = 0;
    int holdsTarget_Detector_85 = 0;
    float thresh_Detector_85 = 0.0;
    }
    init:
    {
      curSample_Detector_85 = 0;
      holdsTarget_Detector_85 = (0 == 1);
      myBeam_Detector_85 = (0 + 1);
      thresh_Detector_85 = 0.1f;
    }
    input:
      Magnitude_84: x1;
    firing:
    {
      float inputVal = pop();
      float outputVal = 0.0;
      if ((holdsTarget_Detector_85 && (42 == curSample_Detector_85))) {
        if (!(inputVal >= thresh_Detector_85)) {
          outputVal = 0;
        } else {
          outputVal = 1;
        }
      } else {
        if (!(inputVal >= thresh_Detector_85)) {
          outputVal = 0;
        } else {
          outputVal = -myBeam_Detector_85;
        }
      }
      outputVal = inputVal;
      curSample_Detector_85++;
      if ((curSample_Detector_85 >= 170)) {
        curSample_Detector_85 = 0;
      }
      push(outputVal);
    }
    output:
      AnonFilter_a3_5_join: y1;
  }

  actor BeamFirFilter_40
  {
    state:
    {
    int numTaps_BeamFirFilter_40=64;
    int inputLength_BeamFirFilter_40=512;
    int decimationRatio_BeamFirFilter_40=3;
    float real_weight_BeamFirFilter_40[64]  = {0.0};
    float imag_weight_BeamFirFilter_40[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_40 = 0;
    float realBuffer_BeamFirFilter_40[64]  = {0.0};
    float imagBuffer_BeamFirFilter_40[64]  = {0.0};
    int count_BeamFirFilter_40 = 0;
    int pos_BeamFirFilter_40 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_40 = (64 - 1);
      pos_BeamFirFilter_40 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_40[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_40[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_39: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_40[(63 - pos_BeamFirFilter_40)] = pop();
      imagBuffer_BeamFirFilter_40[(63 - pos_BeamFirFilter_40)] = pop();
      modPos = (63 - pos_BeamFirFilter_40);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_40[modPos] * real_weight_BeamFirFilter_40[i]) + (imagBuffer_BeamFirFilter_40[modPos] * imag_weight_BeamFirFilter_40[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_40[modPos] * real_weight_BeamFirFilter_40[i]) + (realBuffer_BeamFirFilter_40[modPos] * imag_weight_BeamFirFilter_40[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_40 = ((pos_BeamFirFilter_40 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_40 += 3;
      if ((count_BeamFirFilter_40 == 512)) {
        count_BeamFirFilter_40 = 0;
        pos_BeamFirFilter_40 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_40[i] = 0;
          imagBuffer_BeamFirFilter_40[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor Detector_92
  {
    state:
    {
    int _myBeam_Detector_92=1;
    int numSamples_Detector_92=170;
    int targetBeam_Detector_92=1;
    int targetSample_Detector_92=42;
    float cfarThreshold_Detector_92=242.24998;
    int curSample_Detector_92 = 0;
    int myBeam_Detector_92 = 0;
    int holdsTarget_Detector_92 = 0;
    float thresh_Detector_92 = 0.0;
    }
    init:
    {
      curSample_Detector_92 = 0;
      holdsTarget_Detector_92 = (1 == 1);
      myBeam_Detector_92 = (1 + 1);
      thresh_Detector_92 = 0.1f;
    }
    input:
      Magnitude_91: x1;
    firing:
    {
      float inputVal = pop();
      float outputVal = 0.0;
      if ((holdsTarget_Detector_92 && (42 == curSample_Detector_92))) {
        if (!(inputVal >= thresh_Detector_92)) {
          outputVal = 0;
        } else {
          outputVal = 2;
        }
      } else {
        if (!(inputVal >= thresh_Detector_92)) {
          outputVal = 0;
        } else {
          outputVal = -myBeam_Detector_92;
        }
      }
      outputVal = inputVal;
      curSample_Detector_92++;
      if ((curSample_Detector_92 >= 170)) {
        curSample_Detector_92 = 0;
      }
      push(outputVal);
    }
    output:
      AnonFilter_a3_5_join: y1;
  }

  actor BeamFirFilter_97
  {
    state:
    {
    int numTaps_BeamFirFilter_97=170;
    int inputLength_BeamFirFilter_97=170;
    int decimationRatio_BeamFirFilter_97=1;
    float real_weight_BeamFirFilter_97[170]  = {0.0};
    float imag_weight_BeamFirFilter_97[170]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_97 = 0;
    float realBuffer_BeamFirFilter_97[170]  = {0.0};
    float imagBuffer_BeamFirFilter_97[170]  = {0.0};
    int count_BeamFirFilter_97 = 0;
    int pos_BeamFirFilter_97 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_97 = (170 - 1);
      pos_BeamFirFilter_97 = 0;
      {
      int j;
      for (j=0; (j < 170); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_97[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_97[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamForm_96: x1,x2;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_97[(169 - pos_BeamFirFilter_97)] = pop();
      imagBuffer_BeamFirFilter_97[(169 - pos_BeamFirFilter_97)] = pop();
      modPos = (169 - pos_BeamFirFilter_97);
      for (i = 0; (i < 170); i++) {
        real_curr += ((realBuffer_BeamFirFilter_97[modPos] * real_weight_BeamFirFilter_97[i]) + (imagBuffer_BeamFirFilter_97[modPos] * imag_weight_BeamFirFilter_97[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_97[modPos] * real_weight_BeamFirFilter_97[i]) + (realBuffer_BeamFirFilter_97[modPos] * imag_weight_BeamFirFilter_97[i]));
        modPos = ((modPos + 1) & 169);
      };
      pos_BeamFirFilter_97 = ((pos_BeamFirFilter_97 + 1) & 169);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 1)); i++) {
        pop();
      };
      count_BeamFirFilter_97 += 1;
      if ((count_BeamFirFilter_97 == 170)) {
        count_BeamFirFilter_97 = 0;
        pos_BeamFirFilter_97 = 0;
        for (i = 0; (i < 170); i++) {
          realBuffer_BeamFirFilter_97[i] = 0;
          imagBuffer_BeamFirFilter_97[i] = 0;
        };
      }
    }
    output:
      Magnitude_98: y1,y2;
  }

  actor BeamFirFilter_104
  {
    state:
    {
    int numTaps_BeamFirFilter_104=170;
    int inputLength_BeamFirFilter_104=170;
    int decimationRatio_BeamFirFilter_104=1;
    float real_weight_BeamFirFilter_104[170]  = {0.0};
    float imag_weight_BeamFirFilter_104[170]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_104 = 0;
    float realBuffer_BeamFirFilter_104[170]  = {0.0};
    float imagBuffer_BeamFirFilter_104[170]  = {0.0};
    int count_BeamFirFilter_104 = 0;
    int pos_BeamFirFilter_104 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_104 = (170 - 1);
      pos_BeamFirFilter_104 = 0;
      {
      int j;
      for (j=0; (j < 170); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_104[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_104[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamForm_103: x1,x2;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_104[(169 - pos_BeamFirFilter_104)] = pop();
      imagBuffer_BeamFirFilter_104[(169 - pos_BeamFirFilter_104)] = pop();
      modPos = (169 - pos_BeamFirFilter_104);
      for (i = 0; (i < 170); i++) {
        real_curr += ((realBuffer_BeamFirFilter_104[modPos] * real_weight_BeamFirFilter_104[i]) + (imagBuffer_BeamFirFilter_104[modPos] * imag_weight_BeamFirFilter_104[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_104[modPos] * real_weight_BeamFirFilter_104[i]) + (realBuffer_BeamFirFilter_104[modPos] * imag_weight_BeamFirFilter_104[i]));
        modPos = ((modPos + 1) & 169);
      };
      pos_BeamFirFilter_104 = ((pos_BeamFirFilter_104 + 1) & 169);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 1)); i++) {
        pop();
      };
      count_BeamFirFilter_104 += 1;
      if ((count_BeamFirFilter_104 == 170)) {
        count_BeamFirFilter_104 = 0;
        pos_BeamFirFilter_104 = 0;
        for (i = 0; (i < 170); i++) {
          realBuffer_BeamFirFilter_104[i] = 0;
          imagBuffer_BeamFirFilter_104[i] = 0;
        };
      }
    }
    output:
      Magnitude_105: y1,y2;
  }

  actor InputGenerate_73
  {
    state:
    {
    int myChannel_InputGenerate_73=11;
    int numberOfSamples_InputGenerate_73=1024;
    int tarBeam_InputGenerate_73=1;
    int targetSample_InputGenerate_73=256;
    float thresh_InputGenerate_73=242.24998;
    int curSample_InputGenerate_73 = 0;
    int holdsTarget_InputGenerate_73 = 0;
    }
    init:
    {
      curSample_InputGenerate_73 = 0;
      holdsTarget_InputGenerate_73 = (1 == 11);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_73 && (curSample_InputGenerate_73 == 256))) {
        push(sqrt((curSample_InputGenerate_73 * 11)));
        push((sqrt((curSample_InputGenerate_73 * 11)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_73 * 11)));
        push(-(sqrt((curSample_InputGenerate_73 * 11)) + 1));
      }
      curSample_InputGenerate_73++;
      if ((curSample_InputGenerate_73 >= 1024)) {
        curSample_InputGenerate_73 = 0;
      }
    }
    output:
      BeamFirFilter_74: y1,y2;
  }

  actor BeamFirFilter_75
  {
    state:
    {
    int numTaps_BeamFirFilter_75=64;
    int inputLength_BeamFirFilter_75=512;
    int decimationRatio_BeamFirFilter_75=3;
    float real_weight_BeamFirFilter_75[64]  = {0.0};
    float imag_weight_BeamFirFilter_75[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_75 = 0;
    float realBuffer_BeamFirFilter_75[64]  = {0.0};
    float imagBuffer_BeamFirFilter_75[64]  = {0.0};
    int count_BeamFirFilter_75 = 0;
    int pos_BeamFirFilter_75 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_75 = (64 - 1);
      pos_BeamFirFilter_75 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_75[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_75[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_74: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_75[(63 - pos_BeamFirFilter_75)] = pop();
      imagBuffer_BeamFirFilter_75[(63 - pos_BeamFirFilter_75)] = pop();
      modPos = (63 - pos_BeamFirFilter_75);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_75[modPos] * real_weight_BeamFirFilter_75[i]) + (imagBuffer_BeamFirFilter_75[modPos] * imag_weight_BeamFirFilter_75[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_75[modPos] * real_weight_BeamFirFilter_75[i]) + (realBuffer_BeamFirFilter_75[modPos] * imag_weight_BeamFirFilter_75[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_75 = ((pos_BeamFirFilter_75 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_75 += 3;
      if ((count_BeamFirFilter_75 == 512)) {
        count_BeamFirFilter_75 = 0;
        pos_BeamFirFilter_75 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_75[i] = 0;
          imagBuffer_BeamFirFilter_75[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor InputGenerate_28
  {
    state:
    {
    int myChannel_InputGenerate_28=2;
    int numberOfSamples_InputGenerate_28=1024;
    int tarBeam_InputGenerate_28=1;
    int targetSample_InputGenerate_28=256;
    float thresh_InputGenerate_28=242.24998;
    int curSample_InputGenerate_28 = 0;
    int holdsTarget_InputGenerate_28 = 0;
    }
    init:
    {
      curSample_InputGenerate_28 = 0;
      holdsTarget_InputGenerate_28 = (1 == 2);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_28 && (curSample_InputGenerate_28 == 256))) {
        push(sqrt((curSample_InputGenerate_28 * 2)));
        push((sqrt((curSample_InputGenerate_28 * 2)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_28 * 2)));
        push(-(sqrt((curSample_InputGenerate_28 * 2)) + 1));
      }
      curSample_InputGenerate_28++;
      if ((curSample_InputGenerate_28 >= 1024)) {
        curSample_InputGenerate_28 = 0;
      }
    }
    output:
      BeamFirFilter_29: y1,y2;
  }

  actor InputGenerate_58
  {
    state:
    {
    int myChannel_InputGenerate_58=8;
    int numberOfSamples_InputGenerate_58=1024;
    int tarBeam_InputGenerate_58=1;
    int targetSample_InputGenerate_58=256;
    float thresh_InputGenerate_58=242.24998;
    int curSample_InputGenerate_58 = 0;
    int holdsTarget_InputGenerate_58 = 0;
    }
    init:
    {
      curSample_InputGenerate_58 = 0;
      holdsTarget_InputGenerate_58 = (1 == 8);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_58 && (curSample_InputGenerate_58 == 256))) {
        push(sqrt((curSample_InputGenerate_58 * 8)));
        push((sqrt((curSample_InputGenerate_58 * 8)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_58 * 8)));
        push(-(sqrt((curSample_InputGenerate_58 * 8)) + 1));
      }
      curSample_InputGenerate_58++;
      if ((curSample_InputGenerate_58 >= 1024)) {
        curSample_InputGenerate_58 = 0;
      }
    }
    output:
      BeamFirFilter_59: y1,y2;
  }

  actor BeamFirFilter_39
  {
    state:
    {
    int numTaps_BeamFirFilter_39=64;
    int inputLength_BeamFirFilter_39=1024;
    int decimationRatio_BeamFirFilter_39=2;
    float real_weight_BeamFirFilter_39[64]  = {0.0};
    float imag_weight_BeamFirFilter_39[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_39 = 0;
    float realBuffer_BeamFirFilter_39[64]  = {0.0};
    float imagBuffer_BeamFirFilter_39[64]  = {0.0};
    int count_BeamFirFilter_39 = 0;
    int pos_BeamFirFilter_39 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_39 = (64 - 1);
      pos_BeamFirFilter_39 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_39[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_39[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_38: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_39[(63 - pos_BeamFirFilter_39)] = pop();
      imagBuffer_BeamFirFilter_39[(63 - pos_BeamFirFilter_39)] = pop();
      modPos = (63 - pos_BeamFirFilter_39);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_39[modPos] * real_weight_BeamFirFilter_39[i]) + (imagBuffer_BeamFirFilter_39[modPos] * imag_weight_BeamFirFilter_39[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_39[modPos] * real_weight_BeamFirFilter_39[i]) + (realBuffer_BeamFirFilter_39[modPos] * imag_weight_BeamFirFilter_39[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_39 = ((pos_BeamFirFilter_39 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_39 += 2;
      if ((count_BeamFirFilter_39 == 1024)) {
        count_BeamFirFilter_39 = 0;
        pos_BeamFirFilter_39 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_39[i] = 0;
          imagBuffer_BeamFirFilter_39[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_40: y1,y2;
  }

  actor InputGenerate_68
  {
    state:
    {
    int myChannel_InputGenerate_68=10;
    int numberOfSamples_InputGenerate_68=1024;
    int tarBeam_InputGenerate_68=1;
    int targetSample_InputGenerate_68=256;
    float thresh_InputGenerate_68=242.24998;
    int curSample_InputGenerate_68 = 0;
    int holdsTarget_InputGenerate_68 = 0;
    }
    init:
    {
      curSample_InputGenerate_68 = 0;
      holdsTarget_InputGenerate_68 = (1 == 10);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_68 && (curSample_InputGenerate_68 == 256))) {
        push(sqrt((curSample_InputGenerate_68 * 10)));
        push((sqrt((curSample_InputGenerate_68 * 10)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_68 * 10)));
        push(-(sqrt((curSample_InputGenerate_68 * 10)) + 1));
      }
      curSample_InputGenerate_68++;
      if ((curSample_InputGenerate_68 >= 1024)) {
        curSample_InputGenerate_68 = 0;
      }
    }
    output:
      BeamFirFilter_69: y1,y2;
  }

  actor FloatPrinter_3
  {
    state:
    {
    float x_FloatPrinter_3 = 0.0;
    }
    input:
      AnonFilter_a3_5_join: x1;
    firing:
    {
      sum += peek(0);
      x_FloatPrinter_3 = pop();
    }
  }

  actor BeamFirFilter_59
  {
    state:
    {
    int numTaps_BeamFirFilter_59=64;
    int inputLength_BeamFirFilter_59=1024;
    int decimationRatio_BeamFirFilter_59=2;
    float real_weight_BeamFirFilter_59[64]  = {0.0};
    float imag_weight_BeamFirFilter_59[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_59 = 0;
    float realBuffer_BeamFirFilter_59[64]  = {0.0};
    float imagBuffer_BeamFirFilter_59[64]  = {0.0};
    int count_BeamFirFilter_59 = 0;
    int pos_BeamFirFilter_59 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_59 = (64 - 1);
      pos_BeamFirFilter_59 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_59[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_59[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_58: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_59[(63 - pos_BeamFirFilter_59)] = pop();
      imagBuffer_BeamFirFilter_59[(63 - pos_BeamFirFilter_59)] = pop();
      modPos = (63 - pos_BeamFirFilter_59);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_59[modPos] * real_weight_BeamFirFilter_59[i]) + (imagBuffer_BeamFirFilter_59[modPos] * imag_weight_BeamFirFilter_59[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_59[modPos] * real_weight_BeamFirFilter_59[i]) + (realBuffer_BeamFirFilter_59[modPos] * imag_weight_BeamFirFilter_59[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_59 = ((pos_BeamFirFilter_59 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_59 += 2;
      if ((count_BeamFirFilter_59 == 1024)) {
        count_BeamFirFilter_59 = 0;
        pos_BeamFirFilter_59 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_59[i] = 0;
          imagBuffer_BeamFirFilter_59[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_60: y1,y2;
  }

  actor BeamFirFilter_19
  {
    state:
    {
    int numTaps_BeamFirFilter_19=64;
    int inputLength_BeamFirFilter_19=1024;
    int decimationRatio_BeamFirFilter_19=2;
    float real_weight_BeamFirFilter_19[64]  = {0.0};
    float imag_weight_BeamFirFilter_19[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_19 = 0;
    float realBuffer_BeamFirFilter_19[64]  = {0.0};
    float imagBuffer_BeamFirFilter_19[64]  = {0.0};
    int count_BeamFirFilter_19 = 0;
    int pos_BeamFirFilter_19 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_19 = (64 - 1);
      pos_BeamFirFilter_19 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_19[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_19[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_18: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_19[(63 - pos_BeamFirFilter_19)] = pop();
      imagBuffer_BeamFirFilter_19[(63 - pos_BeamFirFilter_19)] = pop();
      modPos = (63 - pos_BeamFirFilter_19);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_19[modPos] * real_weight_BeamFirFilter_19[i]) + (imagBuffer_BeamFirFilter_19[modPos] * imag_weight_BeamFirFilter_19[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_19[modPos] * real_weight_BeamFirFilter_19[i]) + (realBuffer_BeamFirFilter_19[modPos] * imag_weight_BeamFirFilter_19[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_19 = ((pos_BeamFirFilter_19 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_19 += 2;
      if ((count_BeamFirFilter_19 == 1024)) {
        count_BeamFirFilter_19 = 0;
        pos_BeamFirFilter_19 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_19[i] = 0;
          imagBuffer_BeamFirFilter_19[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_20: y1,y2;
  }

  actor BeamFirFilter_64
  {
    state:
    {
    int numTaps_BeamFirFilter_64=64;
    int inputLength_BeamFirFilter_64=1024;
    int decimationRatio_BeamFirFilter_64=2;
    float real_weight_BeamFirFilter_64[64]  = {0.0};
    float imag_weight_BeamFirFilter_64[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_64 = 0;
    float realBuffer_BeamFirFilter_64[64]  = {0.0};
    float imagBuffer_BeamFirFilter_64[64]  = {0.0};
    int count_BeamFirFilter_64 = 0;
    int pos_BeamFirFilter_64 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_64 = (64 - 1);
      pos_BeamFirFilter_64 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_64[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_64[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_63: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_64[(63 - pos_BeamFirFilter_64)] = pop();
      imagBuffer_BeamFirFilter_64[(63 - pos_BeamFirFilter_64)] = pop();
      modPos = (63 - pos_BeamFirFilter_64);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_64[modPos] * real_weight_BeamFirFilter_64[i]) + (imagBuffer_BeamFirFilter_64[modPos] * imag_weight_BeamFirFilter_64[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_64[modPos] * real_weight_BeamFirFilter_64[i]) + (realBuffer_BeamFirFilter_64[modPos] * imag_weight_BeamFirFilter_64[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_64 = ((pos_BeamFirFilter_64 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_64 += 2;
      if ((count_BeamFirFilter_64 == 1024)) {
        count_BeamFirFilter_64 = 0;
        pos_BeamFirFilter_64 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_64[i] = 0;
          imagBuffer_BeamFirFilter_64[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_65: y1,y2;
  }

  actor Magnitude_98
  {
    init:
    {
    }
    input:
      BeamFirFilter_97: x1,x2;
    firing:
    {
      float f1 = pop();
      float f2 = pop();
      push(mag(f1, f2));
    }
    output:
      Detector_99: y1;
  }

  actor BeamFirFilter_45
  {
    state:
    {
    int numTaps_BeamFirFilter_45=64;
    int inputLength_BeamFirFilter_45=512;
    int decimationRatio_BeamFirFilter_45=3;
    float real_weight_BeamFirFilter_45[64]  = {0.0};
    float imag_weight_BeamFirFilter_45[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_45 = 0;
    float realBuffer_BeamFirFilter_45[64]  = {0.0};
    float imagBuffer_BeamFirFilter_45[64]  = {0.0};
    int count_BeamFirFilter_45 = 0;
    int pos_BeamFirFilter_45 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_45 = (64 - 1);
      pos_BeamFirFilter_45 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_45[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_45[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_44: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_45[(63 - pos_BeamFirFilter_45)] = pop();
      imagBuffer_BeamFirFilter_45[(63 - pos_BeamFirFilter_45)] = pop();
      modPos = (63 - pos_BeamFirFilter_45);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_45[modPos] * real_weight_BeamFirFilter_45[i]) + (imagBuffer_BeamFirFilter_45[modPos] * imag_weight_BeamFirFilter_45[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_45[modPos] * real_weight_BeamFirFilter_45[i]) + (realBuffer_BeamFirFilter_45[modPos] * imag_weight_BeamFirFilter_45[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_45 = ((pos_BeamFirFilter_45 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_45 += 3;
      if ((count_BeamFirFilter_45 == 512)) {
        count_BeamFirFilter_45 = 0;
        pos_BeamFirFilter_45 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_45[i] = 0;
          imagBuffer_BeamFirFilter_45[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_34
  {
    state:
    {
    int numTaps_BeamFirFilter_34=64;
    int inputLength_BeamFirFilter_34=1024;
    int decimationRatio_BeamFirFilter_34=2;
    float real_weight_BeamFirFilter_34[64]  = {0.0};
    float imag_weight_BeamFirFilter_34[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_34 = 0;
    float realBuffer_BeamFirFilter_34[64]  = {0.0};
    float imagBuffer_BeamFirFilter_34[64]  = {0.0};
    int count_BeamFirFilter_34 = 0;
    int pos_BeamFirFilter_34 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_34 = (64 - 1);
      pos_BeamFirFilter_34 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_34[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_34[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_33: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_34[(63 - pos_BeamFirFilter_34)] = pop();
      imagBuffer_BeamFirFilter_34[(63 - pos_BeamFirFilter_34)] = pop();
      modPos = (63 - pos_BeamFirFilter_34);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_34[modPos] * real_weight_BeamFirFilter_34[i]) + (imagBuffer_BeamFirFilter_34[modPos] * imag_weight_BeamFirFilter_34[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_34[modPos] * real_weight_BeamFirFilter_34[i]) + (realBuffer_BeamFirFilter_34[modPos] * imag_weight_BeamFirFilter_34[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_34 = ((pos_BeamFirFilter_34 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_34 += 2;
      if ((count_BeamFirFilter_34 == 1024)) {
        count_BeamFirFilter_34 = 0;
        pos_BeamFirFilter_34 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_34[i] = 0;
          imagBuffer_BeamFirFilter_34[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_35: y1,y2;
  }

  actor BeamFirFilter_44
  {
    state:
    {
    int numTaps_BeamFirFilter_44=64;
    int inputLength_BeamFirFilter_44=1024;
    int decimationRatio_BeamFirFilter_44=2;
    float real_weight_BeamFirFilter_44[64]  = {0.0};
    float imag_weight_BeamFirFilter_44[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_44 = 0;
    float realBuffer_BeamFirFilter_44[64]  = {0.0};
    float imagBuffer_BeamFirFilter_44[64]  = {0.0};
    int count_BeamFirFilter_44 = 0;
    int pos_BeamFirFilter_44 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_44 = (64 - 1);
      pos_BeamFirFilter_44 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_44[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_44[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_43: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_44[(63 - pos_BeamFirFilter_44)] = pop();
      imagBuffer_BeamFirFilter_44[(63 - pos_BeamFirFilter_44)] = pop();
      modPos = (63 - pos_BeamFirFilter_44);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_44[modPos] * real_weight_BeamFirFilter_44[i]) + (imagBuffer_BeamFirFilter_44[modPos] * imag_weight_BeamFirFilter_44[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_44[modPos] * real_weight_BeamFirFilter_44[i]) + (realBuffer_BeamFirFilter_44[modPos] * imag_weight_BeamFirFilter_44[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_44 = ((pos_BeamFirFilter_44 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_44 += 2;
      if ((count_BeamFirFilter_44 == 1024)) {
        count_BeamFirFilter_44 = 0;
        pos_BeamFirFilter_44 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_44[i] = 0;
          imagBuffer_BeamFirFilter_44[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_45: y1,y2;
  }

  actor InputGenerate_63
  {
    state:
    {
    int myChannel_InputGenerate_63=9;
    int numberOfSamples_InputGenerate_63=1024;
    int tarBeam_InputGenerate_63=1;
    int targetSample_InputGenerate_63=256;
    float thresh_InputGenerate_63=242.24998;
    int curSample_InputGenerate_63 = 0;
    int holdsTarget_InputGenerate_63 = 0;
    }
    init:
    {
      curSample_InputGenerate_63 = 0;
      holdsTarget_InputGenerate_63 = (1 == 9);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_63 && (curSample_InputGenerate_63 == 256))) {
        push(sqrt((curSample_InputGenerate_63 * 9)));
        push((sqrt((curSample_InputGenerate_63 * 9)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_63 * 9)));
        push(-(sqrt((curSample_InputGenerate_63 * 9)) + 1));
      }
      curSample_InputGenerate_63++;
      if ((curSample_InputGenerate_63 >= 1024)) {
        curSample_InputGenerate_63 = 0;
      }
    }
    output:
      BeamFirFilter_64: y1,y2;
  }

  actor Magnitude_84
  {
    init:
    {
    }
    input:
      BeamFirFilter_83: x1,x2;
    firing:
    {
      float f1 = pop();
      float f2 = pop();
      push(mag(f1, f2));
    }
    output:
      Detector_85: y1;
  }

  actor BeamFirFilter_54
  {
    state:
    {
    int numTaps_BeamFirFilter_54=64;
    int inputLength_BeamFirFilter_54=1024;
    int decimationRatio_BeamFirFilter_54=2;
    float real_weight_BeamFirFilter_54[64]  = {0.0};
    float imag_weight_BeamFirFilter_54[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_54 = 0;
    float realBuffer_BeamFirFilter_54[64]  = {0.0};
    float imagBuffer_BeamFirFilter_54[64]  = {0.0};
    int count_BeamFirFilter_54 = 0;
    int pos_BeamFirFilter_54 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_54 = (64 - 1);
      pos_BeamFirFilter_54 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_54[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_54[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_53: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_54[(63 - pos_BeamFirFilter_54)] = pop();
      imagBuffer_BeamFirFilter_54[(63 - pos_BeamFirFilter_54)] = pop();
      modPos = (63 - pos_BeamFirFilter_54);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_54[modPos] * real_weight_BeamFirFilter_54[i]) + (imagBuffer_BeamFirFilter_54[modPos] * imag_weight_BeamFirFilter_54[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_54[modPos] * real_weight_BeamFirFilter_54[i]) + (realBuffer_BeamFirFilter_54[modPos] * imag_weight_BeamFirFilter_54[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_54 = ((pos_BeamFirFilter_54 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_54 += 2;
      if ((count_BeamFirFilter_54 == 1024)) {
        count_BeamFirFilter_54 = 0;
        pos_BeamFirFilter_54 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_54[i] = 0;
          imagBuffer_BeamFirFilter_54[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_55: y1,y2;
  }

  actor InputGenerate_38
  {
    state:
    {
    int myChannel_InputGenerate_38=4;
    int numberOfSamples_InputGenerate_38=1024;
    int tarBeam_InputGenerate_38=1;
    int targetSample_InputGenerate_38=256;
    float thresh_InputGenerate_38=242.24998;
    int curSample_InputGenerate_38 = 0;
    int holdsTarget_InputGenerate_38 = 0;
    }
    init:
    {
      curSample_InputGenerate_38 = 0;
      holdsTarget_InputGenerate_38 = (1 == 4);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_38 && (curSample_InputGenerate_38 == 256))) {
        push(sqrt((curSample_InputGenerate_38 * 4)));
        push((sqrt((curSample_InputGenerate_38 * 4)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_38 * 4)));
        push(-(sqrt((curSample_InputGenerate_38 * 4)) + 1));
      }
      curSample_InputGenerate_38++;
      if ((curSample_InputGenerate_38 >= 1024)) {
        curSample_InputGenerate_38 = 0;
      }
    }
    output:
      BeamFirFilter_39: y1,y2;
  }

  actor BeamForm_103
  {
    state:
    {
    int myBeamId_BeamForm_103=3;
    int numChannels_BeamForm_103=12;
    float real_weight_BeamForm_103[12]  = {0.0};
    float imag_weight_BeamForm_103[12]  = {0.0};
    }
    init:
    {
      {
      int j;
      for (j=0; (j < 12); j++) {
        int idx = (j + 1);
        real_weight_BeamForm_103[j] = (sin(idx) / ((float)((3 + idx))));
        imag_weight_BeamForm_103[j] = (cos(idx) / ((float)((3 + idx))));
      }
      };
    }
    input:
      AnonFilter_a3_5_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      {
      int i;
      for (i=0; (i < 12); i++) {
        float real_pop = pop();
        float imag_pop = pop();
        real_curr += ((real_weight_BeamForm_103[i] * real_pop) - (imag_weight_BeamForm_103[i] * imag_pop));
        imag_curr += ((real_weight_BeamForm_103[i] * imag_pop) + (imag_weight_BeamForm_103[i] * real_pop));
      }
      };
      push(real_curr);
      push(imag_curr);
    }
    output:
      BeamFirFilter_104: y1,y2;
  }

  actor BeamForm_82
  {
    state:
    {
    int myBeamId_BeamForm_82=0;
    int numChannels_BeamForm_82=12;
    float real_weight_BeamForm_82[12]  = {0.0};
    float imag_weight_BeamForm_82[12]  = {0.0};
    }
    init:
    {
      {
      int j;
      for (j=0; (j < 12); j++) {
        int idx = (j + 1);
        real_weight_BeamForm_82[j] = (sin(idx) / ((float)((0 + idx))));
        imag_weight_BeamForm_82[j] = (cos(idx) / ((float)((0 + idx))));
      }
      };
    }
    input:
      AnonFilter_a3_5_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      {
      int i;
      for (i=0; (i < 12); i++) {
        float real_pop = pop();
        float imag_pop = pop();
        real_curr += ((real_weight_BeamForm_82[i] * real_pop) - (imag_weight_BeamForm_82[i] * imag_pop));
        imag_curr += ((real_weight_BeamForm_82[i] * imag_pop) + (imag_weight_BeamForm_82[i] * real_pop));
      }
      };
      push(real_curr);
      push(imag_curr);
    }
    output:
      BeamFirFilter_83: y1,y2;
  }

  actor Detector_106
  {
    state:
    {
    int _myBeam_Detector_106=3;
    int numSamples_Detector_106=170;
    int targetBeam_Detector_106=1;
    int targetSample_Detector_106=42;
    float cfarThreshold_Detector_106=242.24998;
    int curSample_Detector_106 = 0;
    int myBeam_Detector_106 = 0;
    int holdsTarget_Detector_106 = 0;
    float thresh_Detector_106 = 0.0;
    }
    init:
    {
      curSample_Detector_106 = 0;
      holdsTarget_Detector_106 = (3 == 1);
      myBeam_Detector_106 = (3 + 1);
      thresh_Detector_106 = 0.1f;
    }
    input:
      Magnitude_105: x1;
    firing:
    {
      float inputVal = pop();
      float outputVal = 0.0;
      if ((holdsTarget_Detector_106 && (42 == curSample_Detector_106))) {
        if (!(inputVal >= thresh_Detector_106)) {
          outputVal = 0;
        } else {
          outputVal = 4;
        }
      } else {
        if (!(inputVal >= thresh_Detector_106)) {
          outputVal = 0;
        } else {
          outputVal = -myBeam_Detector_106;
        }
      }
      outputVal = inputVal;
      curSample_Detector_106++;
      if ((curSample_Detector_106 >= 170)) {
        curSample_Detector_106 = 0;
      }
      push(outputVal);
    }
    output:
      AnonFilter_a3_5_join: y1;
  }

  actor BeamForm_89
  {
    state:
    {
    int myBeamId_BeamForm_89=1;
    int numChannels_BeamForm_89=12;
    float real_weight_BeamForm_89[12]  = {0.0};
    float imag_weight_BeamForm_89[12]  = {0.0};
    }
    init:
    {
      {
      int j;
      for (j=0; (j < 12); j++) {
        int idx = (j + 1);
        real_weight_BeamForm_89[j] = (sin(idx) / ((float)((1 + idx))));
        imag_weight_BeamForm_89[j] = (cos(idx) / ((float)((1 + idx))));
      }
      };
    }
    input:
      AnonFilter_a3_5_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      {
      int i;
      for (i=0; (i < 12); i++) {
        float real_pop = pop();
        float imag_pop = pop();
        real_curr += ((real_weight_BeamForm_89[i] * real_pop) - (imag_weight_BeamForm_89[i] * imag_pop));
        imag_curr += ((real_weight_BeamForm_89[i] * imag_pop) + (imag_weight_BeamForm_89[i] * real_pop));
      }
      };
      push(real_curr);
      push(imag_curr);
    }
    output:
      BeamFirFilter_90: y1,y2;
  }

  actor BeamFirFilter_20
  {
    state:
    {
    int numTaps_BeamFirFilter_20=64;
    int inputLength_BeamFirFilter_20=512;
    int decimationRatio_BeamFirFilter_20=3;
    float real_weight_BeamFirFilter_20[64]  = {0.0};
    float imag_weight_BeamFirFilter_20[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_20 = 0;
    float realBuffer_BeamFirFilter_20[64]  = {0.0};
    float imagBuffer_BeamFirFilter_20[64]  = {0.0};
    int count_BeamFirFilter_20 = 0;
    int pos_BeamFirFilter_20 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_20 = (64 - 1);
      pos_BeamFirFilter_20 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_20[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_20[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_19: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_20[(63 - pos_BeamFirFilter_20)] = pop();
      imagBuffer_BeamFirFilter_20[(63 - pos_BeamFirFilter_20)] = pop();
      modPos = (63 - pos_BeamFirFilter_20);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_20[modPos] * real_weight_BeamFirFilter_20[i]) + (imagBuffer_BeamFirFilter_20[modPos] * imag_weight_BeamFirFilter_20[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_20[modPos] * real_weight_BeamFirFilter_20[i]) + (realBuffer_BeamFirFilter_20[modPos] * imag_weight_BeamFirFilter_20[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_20 = ((pos_BeamFirFilter_20 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_20 += 3;
      if ((count_BeamFirFilter_20 == 512)) {
        count_BeamFirFilter_20 = 0;
        pos_BeamFirFilter_20 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_20[i] = 0;
          imagBuffer_BeamFirFilter_20[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_69
  {
    state:
    {
    int numTaps_BeamFirFilter_69=64;
    int inputLength_BeamFirFilter_69=1024;
    int decimationRatio_BeamFirFilter_69=2;
    float real_weight_BeamFirFilter_69[64]  = {0.0};
    float imag_weight_BeamFirFilter_69[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_69 = 0;
    float realBuffer_BeamFirFilter_69[64]  = {0.0};
    float imagBuffer_BeamFirFilter_69[64]  = {0.0};
    int count_BeamFirFilter_69 = 0;
    int pos_BeamFirFilter_69 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_69 = (64 - 1);
      pos_BeamFirFilter_69 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_69[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_69[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_68: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_69[(63 - pos_BeamFirFilter_69)] = pop();
      imagBuffer_BeamFirFilter_69[(63 - pos_BeamFirFilter_69)] = pop();
      modPos = (63 - pos_BeamFirFilter_69);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_69[modPos] * real_weight_BeamFirFilter_69[i]) + (imagBuffer_BeamFirFilter_69[modPos] * imag_weight_BeamFirFilter_69[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_69[modPos] * real_weight_BeamFirFilter_69[i]) + (realBuffer_BeamFirFilter_69[modPos] * imag_weight_BeamFirFilter_69[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_69 = ((pos_BeamFirFilter_69 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_69 += 2;
      if ((count_BeamFirFilter_69 == 1024)) {
        count_BeamFirFilter_69 = 0;
        pos_BeamFirFilter_69 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_69[i] = 0;
          imagBuffer_BeamFirFilter_69[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_70: y1,y2;
  }

  actor BeamFirFilter_60
  {
    state:
    {
    int numTaps_BeamFirFilter_60=64;
    int inputLength_BeamFirFilter_60=512;
    int decimationRatio_BeamFirFilter_60=3;
    float real_weight_BeamFirFilter_60[64]  = {0.0};
    float imag_weight_BeamFirFilter_60[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_60 = 0;
    float realBuffer_BeamFirFilter_60[64]  = {0.0};
    float imagBuffer_BeamFirFilter_60[64]  = {0.0};
    int count_BeamFirFilter_60 = 0;
    int pos_BeamFirFilter_60 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_60 = (64 - 1);
      pos_BeamFirFilter_60 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_60[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_60[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_59: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_60[(63 - pos_BeamFirFilter_60)] = pop();
      imagBuffer_BeamFirFilter_60[(63 - pos_BeamFirFilter_60)] = pop();
      modPos = (63 - pos_BeamFirFilter_60);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_60[modPos] * real_weight_BeamFirFilter_60[i]) + (imagBuffer_BeamFirFilter_60[modPos] * imag_weight_BeamFirFilter_60[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_60[modPos] * real_weight_BeamFirFilter_60[i]) + (realBuffer_BeamFirFilter_60[modPos] * imag_weight_BeamFirFilter_60[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_60 = ((pos_BeamFirFilter_60 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_60 += 3;
      if ((count_BeamFirFilter_60 == 512)) {
        count_BeamFirFilter_60 = 0;
        pos_BeamFirFilter_60 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_60[i] = 0;
          imagBuffer_BeamFirFilter_60[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_90
  {
    state:
    {
    int numTaps_BeamFirFilter_90=170;
    int inputLength_BeamFirFilter_90=170;
    int decimationRatio_BeamFirFilter_90=1;
    float real_weight_BeamFirFilter_90[170]  = {0.0};
    float imag_weight_BeamFirFilter_90[170]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_90 = 0;
    float realBuffer_BeamFirFilter_90[170]  = {0.0};
    float imagBuffer_BeamFirFilter_90[170]  = {0.0};
    int count_BeamFirFilter_90 = 0;
    int pos_BeamFirFilter_90 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_90 = (170 - 1);
      pos_BeamFirFilter_90 = 0;
      {
      int j;
      for (j=0; (j < 170); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_90[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_90[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamForm_89: x1,x2;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_90[(169 - pos_BeamFirFilter_90)] = pop();
      imagBuffer_BeamFirFilter_90[(169 - pos_BeamFirFilter_90)] = pop();
      modPos = (169 - pos_BeamFirFilter_90);
      for (i = 0; (i < 170); i++) {
        real_curr += ((realBuffer_BeamFirFilter_90[modPos] * real_weight_BeamFirFilter_90[i]) + (imagBuffer_BeamFirFilter_90[modPos] * imag_weight_BeamFirFilter_90[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_90[modPos] * real_weight_BeamFirFilter_90[i]) + (realBuffer_BeamFirFilter_90[modPos] * imag_weight_BeamFirFilter_90[i]));
        modPos = ((modPos + 1) & 169);
      };
      pos_BeamFirFilter_90 = ((pos_BeamFirFilter_90 + 1) & 169);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 1)); i++) {
        pop();
      };
      count_BeamFirFilter_90 += 1;
      if ((count_BeamFirFilter_90 == 170)) {
        count_BeamFirFilter_90 = 0;
        pos_BeamFirFilter_90 = 0;
        for (i = 0; (i < 170); i++) {
          realBuffer_BeamFirFilter_90[i] = 0;
          imagBuffer_BeamFirFilter_90[i] = 0;
        };
      }
    }
    output:
      Magnitude_91: y1,y2;
  }

  actor InputGenerate_48
  {
    state:
    {
    int myChannel_InputGenerate_48=6;
    int numberOfSamples_InputGenerate_48=1024;
    int tarBeam_InputGenerate_48=1;
    int targetSample_InputGenerate_48=256;
    float thresh_InputGenerate_48=242.24998;
    int curSample_InputGenerate_48 = 0;
    int holdsTarget_InputGenerate_48 = 0;
    }
    init:
    {
      curSample_InputGenerate_48 = 0;
      holdsTarget_InputGenerate_48 = (1 == 6);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_48 && (curSample_InputGenerate_48 == 256))) {
        push(sqrt((curSample_InputGenerate_48 * 6)));
        push((sqrt((curSample_InputGenerate_48 * 6)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_48 * 6)));
        push(-(sqrt((curSample_InputGenerate_48 * 6)) + 1));
      }
      curSample_InputGenerate_48++;
      if ((curSample_InputGenerate_48 >= 1024)) {
        curSample_InputGenerate_48 = 0;
      }
    }
    output:
      BeamFirFilter_49: y1,y2;
  }

  actor BeamFirFilter_29
  {
    state:
    {
    int numTaps_BeamFirFilter_29=64;
    int inputLength_BeamFirFilter_29=1024;
    int decimationRatio_BeamFirFilter_29=2;
    float real_weight_BeamFirFilter_29[64]  = {0.0};
    float imag_weight_BeamFirFilter_29[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_29 = 0;
    float realBuffer_BeamFirFilter_29[64]  = {0.0};
    float imagBuffer_BeamFirFilter_29[64]  = {0.0};
    int count_BeamFirFilter_29 = 0;
    int pos_BeamFirFilter_29 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_29 = (64 - 1);
      pos_BeamFirFilter_29 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_29[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_29[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_28: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_29[(63 - pos_BeamFirFilter_29)] = pop();
      imagBuffer_BeamFirFilter_29[(63 - pos_BeamFirFilter_29)] = pop();
      modPos = (63 - pos_BeamFirFilter_29);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_29[modPos] * real_weight_BeamFirFilter_29[i]) + (imagBuffer_BeamFirFilter_29[modPos] * imag_weight_BeamFirFilter_29[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_29[modPos] * real_weight_BeamFirFilter_29[i]) + (realBuffer_BeamFirFilter_29[modPos] * imag_weight_BeamFirFilter_29[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_29 = ((pos_BeamFirFilter_29 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_29 += 2;
      if ((count_BeamFirFilter_29 == 1024)) {
        count_BeamFirFilter_29 = 0;
        pos_BeamFirFilter_29 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_29[i] = 0;
          imagBuffer_BeamFirFilter_29[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_30: y1,y2;
  }

  actor Detector_99
  {
    state:
    {
    int _myBeam_Detector_99=2;
    int numSamples_Detector_99=170;
    int targetBeam_Detector_99=1;
    int targetSample_Detector_99=42;
    float cfarThreshold_Detector_99=242.24998;
    int curSample_Detector_99 = 0;
    int myBeam_Detector_99 = 0;
    int holdsTarget_Detector_99 = 0;
    float thresh_Detector_99 = 0.0;
    }
    init:
    {
      curSample_Detector_99 = 0;
      holdsTarget_Detector_99 = (2 == 1);
      myBeam_Detector_99 = (2 + 1);
      thresh_Detector_99 = 0.1f;
    }
    input:
      Magnitude_98: x1;
    firing:
    {
      float inputVal = pop();
      float outputVal = 0.0;
      if ((holdsTarget_Detector_99 && (42 == curSample_Detector_99))) {
        if (!(inputVal >= thresh_Detector_99)) {
          outputVal = 0;
        } else {
          outputVal = 3;
        }
      } else {
        if (!(inputVal >= thresh_Detector_99)) {
          outputVal = 0;
        } else {
          outputVal = -myBeam_Detector_99;
        }
      }
      outputVal = inputVal;
      curSample_Detector_99++;
      if ((curSample_Detector_99 >= 170)) {
        curSample_Detector_99 = 0;
      }
      push(outputVal);
    }
    output:
      AnonFilter_a3_5_join: y1;
  }

  actor Magnitude_105
  {
    init:
    {
    }
    input:
      BeamFirFilter_104: x1,x2;
    firing:
    {
      float f1 = pop();
      float f2 = pop();
      push(mag(f1, f2));
    }
    output:
      Detector_106: y1;
  }

  actor BeamFirFilter_65
  {
    state:
    {
    int numTaps_BeamFirFilter_65=64;
    int inputLength_BeamFirFilter_65=512;
    int decimationRatio_BeamFirFilter_65=3;
    float real_weight_BeamFirFilter_65[64]  = {0.0};
    float imag_weight_BeamFirFilter_65[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_65 = 0;
    float realBuffer_BeamFirFilter_65[64]  = {0.0};
    float imagBuffer_BeamFirFilter_65[64]  = {0.0};
    int count_BeamFirFilter_65 = 0;
    int pos_BeamFirFilter_65 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_65 = (64 - 1);
      pos_BeamFirFilter_65 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_65[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_65[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_64: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_65[(63 - pos_BeamFirFilter_65)] = pop();
      imagBuffer_BeamFirFilter_65[(63 - pos_BeamFirFilter_65)] = pop();
      modPos = (63 - pos_BeamFirFilter_65);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_65[modPos] * real_weight_BeamFirFilter_65[i]) + (imagBuffer_BeamFirFilter_65[modPos] * imag_weight_BeamFirFilter_65[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_65[modPos] * real_weight_BeamFirFilter_65[i]) + (realBuffer_BeamFirFilter_65[modPos] * imag_weight_BeamFirFilter_65[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_65 = ((pos_BeamFirFilter_65 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_65 += 3;
      if ((count_BeamFirFilter_65 == 512)) {
        count_BeamFirFilter_65 = 0;
        pos_BeamFirFilter_65 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_65[i] = 0;
          imagBuffer_BeamFirFilter_65[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor InputGenerate_43
  {
    state:
    {
    int myChannel_InputGenerate_43=5;
    int numberOfSamples_InputGenerate_43=1024;
    int tarBeam_InputGenerate_43=1;
    int targetSample_InputGenerate_43=256;
    float thresh_InputGenerate_43=242.24998;
    int curSample_InputGenerate_43 = 0;
    int holdsTarget_InputGenerate_43 = 0;
    }
    init:
    {
      curSample_InputGenerate_43 = 0;
      holdsTarget_InputGenerate_43 = (1 == 5);
    }
    input:
      AnonFilter_a1_4_split: x1;
    firing:
    {
      pop();
      if ((holdsTarget_InputGenerate_43 && (curSample_InputGenerate_43 == 256))) {
        push(sqrt((curSample_InputGenerate_43 * 5)));
        push((sqrt((curSample_InputGenerate_43 * 5)) + 1));
      } else {
        push(-sqrt((curSample_InputGenerate_43 * 5)));
        push(-(sqrt((curSample_InputGenerate_43 * 5)) + 1));
      }
      curSample_InputGenerate_43++;
      if ((curSample_InputGenerate_43 >= 1024)) {
        curSample_InputGenerate_43 = 0;
      }
    }
    output:
      BeamFirFilter_44: y1,y2;
  }

  actor BeamFirFilter_55
  {
    state:
    {
    int numTaps_BeamFirFilter_55=64;
    int inputLength_BeamFirFilter_55=512;
    int decimationRatio_BeamFirFilter_55=3;
    float real_weight_BeamFirFilter_55[64]  = {0.0};
    float imag_weight_BeamFirFilter_55[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_55 = 0;
    float realBuffer_BeamFirFilter_55[64]  = {0.0};
    float imagBuffer_BeamFirFilter_55[64]  = {0.0};
    int count_BeamFirFilter_55 = 0;
    int pos_BeamFirFilter_55 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_55 = (64 - 1);
      pos_BeamFirFilter_55 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_55[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_55[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_54: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_55[(63 - pos_BeamFirFilter_55)] = pop();
      imagBuffer_BeamFirFilter_55[(63 - pos_BeamFirFilter_55)] = pop();
      modPos = (63 - pos_BeamFirFilter_55);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_55[modPos] * real_weight_BeamFirFilter_55[i]) + (imagBuffer_BeamFirFilter_55[modPos] * imag_weight_BeamFirFilter_55[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_55[modPos] * real_weight_BeamFirFilter_55[i]) + (realBuffer_BeamFirFilter_55[modPos] * imag_weight_BeamFirFilter_55[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_55 = ((pos_BeamFirFilter_55 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_55 += 3;
      if ((count_BeamFirFilter_55 == 512)) {
        count_BeamFirFilter_55 = 0;
        pos_BeamFirFilter_55 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_55[i] = 0;
          imagBuffer_BeamFirFilter_55[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_35
  {
    state:
    {
    int numTaps_BeamFirFilter_35=64;
    int inputLength_BeamFirFilter_35=512;
    int decimationRatio_BeamFirFilter_35=3;
    float real_weight_BeamFirFilter_35[64]  = {0.0};
    float imag_weight_BeamFirFilter_35[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_35 = 0;
    float realBuffer_BeamFirFilter_35[64]  = {0.0};
    float imagBuffer_BeamFirFilter_35[64]  = {0.0};
    int count_BeamFirFilter_35 = 0;
    int pos_BeamFirFilter_35 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_35 = (64 - 1);
      pos_BeamFirFilter_35 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_35[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_35[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_34: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_35[(63 - pos_BeamFirFilter_35)] = pop();
      imagBuffer_BeamFirFilter_35[(63 - pos_BeamFirFilter_35)] = pop();
      modPos = (63 - pos_BeamFirFilter_35);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_35[modPos] * real_weight_BeamFirFilter_35[i]) + (imagBuffer_BeamFirFilter_35[modPos] * imag_weight_BeamFirFilter_35[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_35[modPos] * real_weight_BeamFirFilter_35[i]) + (realBuffer_BeamFirFilter_35[modPos] * imag_weight_BeamFirFilter_35[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_35 = ((pos_BeamFirFilter_35 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_35 += 3;
      if ((count_BeamFirFilter_35 == 512)) {
        count_BeamFirFilter_35 = 0;
        pos_BeamFirFilter_35 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_35[i] = 0;
          imagBuffer_BeamFirFilter_35[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_50
  {
    state:
    {
    int numTaps_BeamFirFilter_50=64;
    int inputLength_BeamFirFilter_50=512;
    int decimationRatio_BeamFirFilter_50=3;
    float real_weight_BeamFirFilter_50[64]  = {0.0};
    float imag_weight_BeamFirFilter_50[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_50 = 0;
    float realBuffer_BeamFirFilter_50[64]  = {0.0};
    float imagBuffer_BeamFirFilter_50[64]  = {0.0};
    int count_BeamFirFilter_50 = 0;
    int pos_BeamFirFilter_50 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_50 = (64 - 1);
      pos_BeamFirFilter_50 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_50[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_50[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_49: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_50[(63 - pos_BeamFirFilter_50)] = pop();
      imagBuffer_BeamFirFilter_50[(63 - pos_BeamFirFilter_50)] = pop();
      modPos = (63 - pos_BeamFirFilter_50);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_50[modPos] * real_weight_BeamFirFilter_50[i]) + (imagBuffer_BeamFirFilter_50[modPos] * imag_weight_BeamFirFilter_50[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_50[modPos] * real_weight_BeamFirFilter_50[i]) + (realBuffer_BeamFirFilter_50[modPos] * imag_weight_BeamFirFilter_50[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_50 = ((pos_BeamFirFilter_50 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_50 += 3;
      if ((count_BeamFirFilter_50 == 512)) {
        count_BeamFirFilter_50 = 0;
        pos_BeamFirFilter_50 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_50[i] = 0;
          imagBuffer_BeamFirFilter_50[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_30
  {
    state:
    {
    int numTaps_BeamFirFilter_30=64;
    int inputLength_BeamFirFilter_30=512;
    int decimationRatio_BeamFirFilter_30=3;
    float real_weight_BeamFirFilter_30[64]  = {0.0};
    float imag_weight_BeamFirFilter_30[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_30 = 0;
    float realBuffer_BeamFirFilter_30[64]  = {0.0};
    float imagBuffer_BeamFirFilter_30[64]  = {0.0};
    int count_BeamFirFilter_30 = 0;
    int pos_BeamFirFilter_30 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_30 = (64 - 1);
      pos_BeamFirFilter_30 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_30[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_30[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_29: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_30[(63 - pos_BeamFirFilter_30)] = pop();
      imagBuffer_BeamFirFilter_30[(63 - pos_BeamFirFilter_30)] = pop();
      modPos = (63 - pos_BeamFirFilter_30);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_30[modPos] * real_weight_BeamFirFilter_30[i]) + (imagBuffer_BeamFirFilter_30[modPos] * imag_weight_BeamFirFilter_30[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_30[modPos] * real_weight_BeamFirFilter_30[i]) + (realBuffer_BeamFirFilter_30[modPos] * imag_weight_BeamFirFilter_30[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_30 = ((pos_BeamFirFilter_30 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_30 += 3;
      if ((count_BeamFirFilter_30 == 512)) {
        count_BeamFirFilter_30 = 0;
        pos_BeamFirFilter_30 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_30[i] = 0;
          imagBuffer_BeamFirFilter_30[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

  actor BeamFirFilter_24
  {
    state:
    {
    int numTaps_BeamFirFilter_24=64;
    int inputLength_BeamFirFilter_24=1024;
    int decimationRatio_BeamFirFilter_24=2;
    float real_weight_BeamFirFilter_24[64]  = {0.0};
    float imag_weight_BeamFirFilter_24[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_24 = 0;
    float realBuffer_BeamFirFilter_24[64]  = {0.0};
    float imagBuffer_BeamFirFilter_24[64]  = {0.0};
    int count_BeamFirFilter_24 = 0;
    int pos_BeamFirFilter_24 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_24 = (64 - 1);
      pos_BeamFirFilter_24 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_24[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_24[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      InputGenerate_23: x1,x2,x3,x4;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_24[(63 - pos_BeamFirFilter_24)] = pop();
      imagBuffer_BeamFirFilter_24[(63 - pos_BeamFirFilter_24)] = pop();
      modPos = (63 - pos_BeamFirFilter_24);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_24[modPos] * real_weight_BeamFirFilter_24[i]) + (imagBuffer_BeamFirFilter_24[modPos] * imag_weight_BeamFirFilter_24[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_24[modPos] * real_weight_BeamFirFilter_24[i]) + (realBuffer_BeamFirFilter_24[modPos] * imag_weight_BeamFirFilter_24[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_24 = ((pos_BeamFirFilter_24 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 2)); i++) {
        pop();
      };
      count_BeamFirFilter_24 += 2;
      if ((count_BeamFirFilter_24 == 1024)) {
        count_BeamFirFilter_24 = 0;
        pos_BeamFirFilter_24 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_24[i] = 0;
          imagBuffer_BeamFirFilter_24[i] = 0;
        };
      }
    }
    output:
      BeamFirFilter_25: y1,y2;
  }

  actor BeamFirFilter_25
  {
    state:
    {
    int numTaps_BeamFirFilter_25=64;
    int inputLength_BeamFirFilter_25=512;
    int decimationRatio_BeamFirFilter_25=3;
    float real_weight_BeamFirFilter_25[64]  = {0.0};
    float imag_weight_BeamFirFilter_25[64]  = {0.0};
    int numTapsMinusOne_BeamFirFilter_25 = 0;
    float realBuffer_BeamFirFilter_25[64]  = {0.0};
    float imagBuffer_BeamFirFilter_25[64]  = {0.0};
    int count_BeamFirFilter_25 = 0;
    int pos_BeamFirFilter_25 = 0;
    }
    init:
    {
      int i = 0;
      numTapsMinusOne_BeamFirFilter_25 = (64 - 1);
      pos_BeamFirFilter_25 = 0;
      {
      int j;
      for (j=0; (j < 64); j++) {
        int idx = (j + 1);
        real_weight_BeamFirFilter_25[j] = (sin(idx) / ((float)(idx)));
        imag_weight_BeamFirFilter_25[j] = (cos(idx) / ((float)(idx)));
      }
      };
    }
    input:
      BeamFirFilter_24: x1,x2,x3,x4,x5,x6;
    firing:
    {
      float real_curr = 0;
      float imag_curr = 0;
      int i = 0;
      int modPos = 0;
      realBuffer_BeamFirFilter_25[(63 - pos_BeamFirFilter_25)] = pop();
      imagBuffer_BeamFirFilter_25[(63 - pos_BeamFirFilter_25)] = pop();
      modPos = (63 - pos_BeamFirFilter_25);
      for (i = 0; (i < 64); i++) {
        real_curr += ((realBuffer_BeamFirFilter_25[modPos] * real_weight_BeamFirFilter_25[i]) + (imagBuffer_BeamFirFilter_25[modPos] * imag_weight_BeamFirFilter_25[i]));
        imag_curr += ((imagBuffer_BeamFirFilter_25[modPos] * real_weight_BeamFirFilter_25[i]) + (realBuffer_BeamFirFilter_25[modPos] * imag_weight_BeamFirFilter_25[i]));
        modPos = ((modPos + 1) & 63);
      };
      pos_BeamFirFilter_25 = ((pos_BeamFirFilter_25 + 1) & 63);
      push(real_curr);
      push(imag_curr);
      for (i = 2; (i < (2 * 3)); i++) {
        pop();
      };
      count_BeamFirFilter_25 += 3;
      if ((count_BeamFirFilter_25 == 512)) {
        count_BeamFirFilter_25 = 0;
        pos_BeamFirFilter_25 = 0;
        for (i = 0; (i < 64); i++) {
          realBuffer_BeamFirFilter_25[i] = 0;
          imagBuffer_BeamFirFilter_25[i] = 0;
        };
      }
    }
    output:
      AnonFilter_a1_4_join: y1,y2;
  }

}

postamble {
int main(){
  BeamFormer();
  printf("sum: %f\n", sum);
  return 0;
}
}
