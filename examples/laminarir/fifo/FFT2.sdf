preamble {
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

volatile double sum = 0.0;
}

sdf FFT2 {
  float FFTTestSource_1 -> FFTKernel2_2_split(64);
  float FFTKernel2_2_split(32) -> FFTReorderSimple_11;
  float FFTReorderSimple_11 -> FFTReorderSimple_12;
  float FFTReorderSimple_12 -> FFTReorderSimple_13;
  float FFTReorderSimple_13 -> CombineDFT_7;
  float CombineDFT_7 -> CombineDFT_8;
  float CombineDFT_8 -> CombineDFT_9;
  float CombineDFT_9 -> CombineDFT_10;
  float CombineDFT_10 -> FFTKernel2_2_join(32);
  float FFTKernel2_2_split(32) -> FFTReorderSimple_25;
  float FFTReorderSimple_25 -> FFTReorderSimple_26;
  float FFTReorderSimple_26 -> FFTReorderSimple_27;
  float FFTReorderSimple_27 -> CombineDFT_21;
  float CombineDFT_21 -> CombineDFT_22;
  float CombineDFT_22 -> CombineDFT_23;
  float CombineDFT_23 -> CombineDFT_24;
  float CombineDFT_24 -> FFTKernel2_2_join(32);
  float FFTKernel2_2_join(64) -> FloatPrinter_3;

  actor CombineDFT_21
  {
    state:
    {
    int n_CombineDFT_21=2;
    float w_CombineDFT_21[2]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 2))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 2))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 2); i += 2) {
        w_CombineDFT_21[i] = real;
        w_CombineDFT_21[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      FFTReorderSimple_27: x1,x2,x3,x4;
    firing:
    {
      int i = 0;
      float results[(2 * 2)]  = {0.0};
      for (i = 0; (i < 2); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((2 + i));
        float y1_i = peek((2 + i_plus_1));
        float weight_real = w_CombineDFT_21[i];
        float weight_imag = w_CombineDFT_21[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(2 + i)] = (y0_r - y1w_r);
        results[((2 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 2)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      CombineDFT_22: y1,y2,y3,y4;
  }

  actor FFTReorderSimple_13
  {
    state:
    {
    int n_FFTReorderSimple_13=4;
    int totalData_FFTReorderSimple_13 = 0;
    }
    init:
    {
      totalData_FFTReorderSimple_13 = (2 * 4);
    }
    input:
      FFTReorderSimple_12: x1,x2,x3,x4,x5,x6,x7,x8;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 8); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 2; (i < 8); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 0; (i < 4); i++) {
        pop();
        pop();
      };
    }
    output:
      CombineDFT_7: y1,y2,y3,y4,y5,y6,y7,y8;
  }

  actor CombineDFT_23
  {
    state:
    {
    int n_CombineDFT_23=8;
    float w_CombineDFT_23[8]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 8))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 8))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 8); i += 2) {
        w_CombineDFT_23[i] = real;
        w_CombineDFT_23[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      CombineDFT_22: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int i = 0;
      float results[(2 * 8)]  = {0.0};
      for (i = 0; (i < 8); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((8 + i));
        float y1_i = peek((8 + i_plus_1));
        float weight_real = w_CombineDFT_23[i];
        float weight_imag = w_CombineDFT_23[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(8 + i)] = (y0_r - y1w_r);
        results[((8 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 8)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      CombineDFT_24: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor FFTReorderSimple_25
  {
    state:
    {
    int n_FFTReorderSimple_25=16;
    int totalData_FFTReorderSimple_25 = 0;
    }
    init:
    {
      totalData_FFTReorderSimple_25 = (2 * 16);
    }
    input:
      FFTKernel2_2_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 2; (i < 32); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 0; (i < 16); i++) {
        pop();
        pop();
      };
    }
    output:
      FFTReorderSimple_26: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor FFTReorderSimple_27
  {
    state:
    {
    int n_FFTReorderSimple_27=4;
    int totalData_FFTReorderSimple_27 = 0;
    }
    init:
    {
      totalData_FFTReorderSimple_27 = (2 * 4);
    }
    input:
      FFTReorderSimple_26: x1,x2,x3,x4,x5,x6,x7,x8;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 8); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 2; (i < 8); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 0; (i < 4); i++) {
        pop();
        pop();
      };
    }
    output:
      CombineDFT_21: y1,y2,y3,y4,y5,y6,y7,y8;
  }

  actor CombineDFT_9
  {
    state:
    {
    int n_CombineDFT_9=8;
    float w_CombineDFT_9[8]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 8))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 8))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 8); i += 2) {
        w_CombineDFT_9[i] = real;
        w_CombineDFT_9[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      CombineDFT_8: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int i = 0;
      float results[(2 * 8)]  = {0.0};
      for (i = 0; (i < 8); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((8 + i));
        float y1_i = peek((8 + i_plus_1));
        float weight_real = w_CombineDFT_9[i];
        float weight_imag = w_CombineDFT_9[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(8 + i)] = (y0_r - y1w_r);
        results[((8 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 8)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      CombineDFT_10: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor FFTReorderSimple_11
  {
    state:
    {
    int n_FFTReorderSimple_11=16;
    int totalData_FFTReorderSimple_11 = 0;
    }
    init:
    {
      totalData_FFTReorderSimple_11 = (2 * 16);
    }
    input:
      FFTKernel2_2_split: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 32); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 2; (i < 32); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 0; (i < 16); i++) {
        pop();
        pop();
      };
    }
    output:
      FFTReorderSimple_12: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor FFTReorderSimple_12
  {
    state:
    {
    int n_FFTReorderSimple_12=8;
    int totalData_FFTReorderSimple_12 = 0;
    }
    init:
    {
      totalData_FFTReorderSimple_12 = (2 * 8);
    }
    input:
      FFTReorderSimple_11: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 16); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 2; (i < 16); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 0; (i < 8); i++) {
        pop();
        pop();
      };
    }
    output:
      FFTReorderSimple_13: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor CombineDFT_7
  {
    state:
    {
    int n_CombineDFT_7=2;
    float w_CombineDFT_7[2]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 2))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 2))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 2); i += 2) {
        w_CombineDFT_7[i] = real;
        w_CombineDFT_7[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      FFTReorderSimple_13: x1,x2,x3,x4;
    firing:
    {
      int i = 0;
      float results[(2 * 2)]  = {0.0};
      for (i = 0; (i < 2); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((2 + i));
        float y1_i = peek((2 + i_plus_1));
        float weight_real = w_CombineDFT_7[i];
        float weight_imag = w_CombineDFT_7[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(2 + i)] = (y0_r - y1w_r);
        results[((2 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 2)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      CombineDFT_8: y1,y2,y3,y4;
  }

  actor CombineDFT_22
  {
    state:
    {
    int n_CombineDFT_22=4;
    float w_CombineDFT_22[4]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 4))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 4))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 4); i += 2) {
        w_CombineDFT_22[i] = real;
        w_CombineDFT_22[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      CombineDFT_21: x1,x2,x3,x4,x5,x6,x7,x8;
    firing:
    {
      int i = 0;
      float results[(2 * 4)]  = {0.0};
      for (i = 0; (i < 4); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((4 + i));
        float y1_i = peek((4 + i_plus_1));
        float weight_real = w_CombineDFT_22[i];
        float weight_imag = w_CombineDFT_22[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(4 + i)] = (y0_r - y1w_r);
        results[((4 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 4)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      CombineDFT_23: y1,y2,y3,y4,y5,y6,y7,y8;
  }

  actor CombineDFT_24
  {
    state:
    {
    int n_CombineDFT_24=16;
    float w_CombineDFT_24[16]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 16))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 16))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 16); i += 2) {
        w_CombineDFT_24[i] = real;
        w_CombineDFT_24[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      CombineDFT_23: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      float results[(2 * 16)]  = {0.0};
      for (i = 0; (i < 16); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((16 + i));
        float y1_i = peek((16 + i_plus_1));
        float weight_real = w_CombineDFT_24[i];
        float weight_imag = w_CombineDFT_24[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(16 + i)] = (y0_r - y1w_r);
        results[((16 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 16)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      FFTKernel2_2_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor FFTTestSource_1
  {
    state:
    {
    int N_FFTTestSource_1=16;
    }
    firing:
    {
      int i = 0;
      push(0.0f);
      push(0.0f);
      push(1.0f);
      push(0.0f);
      for (i = 0; (i < (2 * (16 - 2))); i++) {
        push(0.0f);
      };
    }
    output:
      FFTKernel2_2_split: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

  actor FloatPrinter_3
  {
    state:
    {
    float x_FloatPrinter_3 = 0.0;
    }
    input:
      FFTKernel2_2_join: x1;
    firing:
    {
      sum += peek(0);
      x_FloatPrinter_3 = pop();
    }
  }

  actor CombineDFT_8
  {
    state:
    {
    int n_CombineDFT_8=4;
    float w_CombineDFT_8[4]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 4))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 4))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 4); i += 2) {
        w_CombineDFT_8[i] = real;
        w_CombineDFT_8[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      CombineDFT_7: x1,x2,x3,x4,x5,x6,x7,x8;
    firing:
    {
      int i = 0;
      float results[(2 * 4)]  = {0.0};
      for (i = 0; (i < 4); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((4 + i));
        float y1_i = peek((4 + i_plus_1));
        float weight_real = w_CombineDFT_8[i];
        float weight_imag = w_CombineDFT_8[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(4 + i)] = (y0_r - y1w_r);
        results[((4 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 4)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      CombineDFT_9: y1,y2,y3,y4,y5,y6,y7,y8;
  }

  actor FFTReorderSimple_26
  {
    state:
    {
    int n_FFTReorderSimple_26=8;
    int totalData_FFTReorderSimple_26 = 0;
    }
    init:
    {
      totalData_FFTReorderSimple_26 = (2 * 8);
    }
    input:
      FFTReorderSimple_25: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16;
    firing:
    {
      int i = 0;
      for (i = 0; (i < 16); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 2; (i < 16); i += 4) {
        push(peek(i));
        push(peek((i + 1)));
      };
      for (i = 0; (i < 8); i++) {
        pop();
        pop();
      };
    }
    output:
      FFTReorderSimple_27: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16;
  }

  actor CombineDFT_10
  {
    state:
    {
    int n_CombineDFT_10=16;
    float w_CombineDFT_10[16]  = {0.0};
    }
    init:
    {
      float wn_r = ((float)(cos(((2 * 3.141592654f) / 16))));
      float wn_i = ((float)(sin(((-2 * 3.141592654f) / 16))));
      float real = 1;
      float imag = 0;
      float next_real = 0.0, next_imag = 0.0;
      {
      int i;
      for (i=0; (i < 16); i += 2) {
        w_CombineDFT_10[i] = real;
        w_CombineDFT_10[(i + 1)] = imag;
        next_real = ((real * wn_r) - (imag * wn_i));
        next_imag = ((real * wn_i) + (imag * wn_r));
        real = next_real;
        imag = next_imag;
      }
      };
    }
    input:
      CombineDFT_9: x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32;
    firing:
    {
      int i = 0;
      float results[(2 * 16)]  = {0.0};
      for (i = 0; (i < 16); i += 2) {
        int i_plus_1 = (i + 1);
        float y0_r = peek(i);
        float y0_i = peek(i_plus_1);
        float y1_r = peek((16 + i));
        float y1_i = peek((16 + i_plus_1));
        float weight_real = w_CombineDFT_10[i];
        float weight_imag = w_CombineDFT_10[i_plus_1];
        float y1w_r = ((y1_r * weight_real) - (y1_i * weight_imag));
        float y1w_i = ((y1_r * weight_imag) + (y1_i * weight_real));
        results[i] = (y0_r + y1w_r);
        results[(i + 1)] = (y0_i + y1w_i);
        results[(16 + i)] = (y0_r - y1w_r);
        results[((16 + i) + 1)] = (y0_i - y1w_i);
      };
      for (i = 0; (i < (2 * 16)); i++) {
        pop();
        push(results[i]);
      };
    }
    output:
      FFTKernel2_2_join: y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15,y16,y17,y18,y19,y20,y21,y22,y23,y24,y25,y26,y27,y28,y29,y30,y31,y32;
  }

}

postamble {
int main(){
  FFT2();
  printf("sum: %f\n", sum);
  return 0;
}
}
